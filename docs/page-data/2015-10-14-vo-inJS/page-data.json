{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2015-10-14-vo-inJS/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Mohwa Blog"}},"markdownRemark":{"id":"a7b0b34c-36b6-5c06-8119-7d2b04641e85","excerpt":"Variable 와 Execution Context 는 서로 밀접하게 관련되어있다. JS 는 오직 Function Execution Context 내에서만 Isolated scope(격리된 유효범위) 을 가질 수 있다.  즉 JS 는 클래스 기반 언어인 C or C…","html":"<ul>\n<li>\n<p>Variable 와 Execution Context 는 서로 밀접하게 관련되어있다.</p>\n</li>\n<li>\n<p>JS 는 오직 Function Execution Context 내에서만 <strong>Isolated scope(격리된 유효범위)</strong> 을 가질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global variable of the global Execution Context</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// function Execution Context</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// local variable of the function Execution Context</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// 유효범위 밖의 접근은 허용하지 않는다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: y is not defined</span></code></pre></div>\n<p><img src=\"https://www.dropbox.com/s/ayn343c6ow0kxy7/85.jpg?dl=1\" alt=\"\"></p>\n</li>\n<li>\n<p>즉 JS 는 <strong>클래스 기반 언어</strong>인 C or C++ 처럼, 블럭 내부에 <span style=\"color:#c11f1f\">Isolated scope</span>(격리된 유효범위) 를 가질 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// global execution context</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// not isolated scope</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// not isolated scope</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n<li>\n<p>Data declaration(데이터 선언)</p>\n<ul>\n<li>\n<p><strong>Variable Object</strong>(<span style=\"color:#c11f1f\">VO</span>) 는 선언된 데이터(Variable, Function)들이 저장되는 <span style=\"color:#c11f1f\">Special Object</span> 이다.</p>\n</li>\n<li>\n<p>즉 우리가 <strong>변수</strong>나 <strong>함수</strong>를 선언하는 것은, <span style=\"color:#c11f1f\">VO</span> 에 새로운 <strong>속성</strong>을 추가하는것과 <strong>동일</strong>하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n// global Execution Context\nvar x = 1;\n\nfunction A(){\n\n  // function Execution Context\n\n}\n```</code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<ul>\n<li>\n<p><span style=\"color:#c11f1f\">VO</span> 는 해당 Execution Context 의 속성으로 표현될 수 있다.<p></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Execution Context 진입 시 x 변수는 undefined 로 초기화되며, </span>\n        <span class=\"token comment\">// A 함수는 Function Object 로 초기화된다.</span>\n        x<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> \n        <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>reference to <span class=\"token keyword\">function</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>선언된 데이터의 종류</p>\n<ul>\n<li>\n<p><strong>변수</strong> 선언(VariableDeclaration(<span style=\"color:#c11f1f\">VD</span>))<p></p>\n</li>\n<li>\n<p><strong>함수</strong> 선언(FunctionDeclaration(<span style=\"color:#c11f1f\">FD</span>))<p></p>\n</li>\n<li>\n<p><strong>함수 매개변수</strong>들(Function Formal Parameters)<p></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n  // global Execution Context\n  // 변수 선언\n  var x = 1;\n\n  // 함수 선언\n  function A(y){\n\n    // function Execution Context\n  \n    // 함수 매개변수\n    console.log(arguments[0]); // undefined\n\n  }\n\n  A();\n```</code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n  var ECStack = [\n    functionExecutionContext: {\n      // function execution context 내부 VO 는 AO(활성화 객체)가 그 역활을 대신한다.\n      AO(VO): {\n        // 전달 받은 함수 매개변수들\n        arguments: {\n          0: undefined\n        }\n        y: undefined\n      }\n    },\n    globalExecutionContext: {\n      VO: {\n        // 변수 선언식에 의한 초기화\n        x: undefined, \n        // 함수 선언식에 의한 초기화\n        A: &lt; reference to function > \n      }\n    }\n  ];\n```</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">VO</span> in Global Execution Context</p>\n<ul>\n<li>\n<p>Global Execution Context 의 <span style=\"color:#c11f1f\">VO</span> 는 <strong>전역 객체</strong>를 가리킨다.<p></p>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">VO</span> 는 Global Execution Context <strong>진입 전에</strong> 생성되며, 프로그램 종료 시 <strong>소멸</strong>된다.</p>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">VO</span> 는 <span style=\"color:#6298c1\">this</span> 키워드를 통해 접근가능하다.</p>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151014/context_1.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n// global Execution Context\nvar x = 1;\n\nconsole.log(this); // global object\n\nconsole.log(x); // 1\nconsole.log(this.x); // 1\n```\n\n![](https://www.dropbox.com/s/giabb54eg1tppkt/87.jpg?dl=1)</code></pre></div>\n</li>\n<li>\n<p><strong>전역 객체</strong>는 <strong>프로그램 레벨</strong>의 어떤한 곳에서도 접근 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// eval Execution Context</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'console.log(this)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// function Execution Context</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global object</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// called function object</span>\n</code></pre></div>\n</li>\n<li>\n<p><strong>전역 객체</strong>는 초기화 시 <span style=\"color:#6298c1\">Math</span>, <span style=\"color:#6298c1\">String</span>, <span style=\"color:#6298c1\">Date</span>, <span style=\"color:#6298c1\">parseInt</span> 등의 기본 <strong>속성</strong>들을 가지며, <u>자기 자신을 <strong>참조</strong>하는 속성인 <span style=\"color:#c11f1f\">window</span> 속성</u>을 갖는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n\nconsole.log(this.Math); // Math object\n\nconsole.dir(this.String); // String function object\n\nconsole.dir(this.parseInt); // parseInt function object\n\nconsole.log(this); // global object\n\nconsole.log(this.window); // global object\n\nconsole.log(this === this.window); // true\n```\t\t</code></pre></div>\n</li>\n<li>\n<p><strong>전역 객체</strong> 접근 시 <strong>접두사</strong> 생략이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token comment\">// global Execution Context</span>\n\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 접두사가 생략되었다.</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">AO</span>(VO) in Function Execution Context</p>\n<ul>\n<li>\n<p>Function Execution Context 내부 <span style=\"color:#c11f1f\">VO</span> 는 <u><strong>직접적인 접근</strong>이 불가능하며</u>, 활성화 객체(<span style=\"color:#c11f1f\">AO</span>)가 이 역활을 대신한다.</p>\n<ul>\n<li>\n<p>Activation Object(<span style=\"color:#c11f1f\">AO</span>)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> Execution Context <span class=\"token constant\">VO</span> <span class=\"token operator\">===</span> <span class=\"token constant\">AO</span></code></pre></div>\n<p><img src=\"http://mohwa.github.io/blog/assets/images/posts/20151014/context_1.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">AO</span> 는 <strong>함수 호출</strong> 후 Function Execution Context 로 진입 시 <strong>생성</strong>되며, 함수 종료시 <strong>소멸</strong>된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n\n  // global Execution Context\n\n  function A(y){\n\n    // function Execution Context\n    console.log(arguments[0]); // undefined\n    console.log(y) // undefined\n\n  }\n\n  // A 함수를 호출한다.\n  A();\n```</code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n  var ECStack = [\n    // 함수 호출 시 function execution context 가 생성된다. \n    functionExecutionContext: {\n      AO(VO): {\n        // 함수 매개변수들\n        arguments: {\n          0: undefined\n        }\n        y: undefined\n      }\n    },\n    globalExecutionContext: {\n      VO: {\n        A: &lt;reference to function> // 함수 선언식을 통해 함수 객체로 초기화된다.\n      }\n    }\n  ];\n```</code></pre></div>\n</li>\n<li>\n<p>arguments 객체 프로퍼티</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nfunction A(x, y, z) {\n\n  // arguments object\n  console.dir(arguments);\n\n  // 선언된 매개변수의 수\n  console.log(A.length); // 3\n\n  // 실제 전달된 매개변수의 수\n  console.log(arguments.length); // 2\n\n  // 함수 자신에 대한 참조\n  console.log(arguments.callee === A); // true\n\n  // 전달된 매개변수와 arguments object 속성은 서로 공유된다.\n  console.log(x === arguments[0]); // true\n  console.log(x); // 10\n\n  // arguments object 속성을 변경한다.\n  arguments[0] = 20;\n  console.log(x); // 20\n\n  x = 30;\n  console.log(arguments[0]); // 30\n\n  // 하지만 함수 호출 시 전달되지 않았던, 매개변수 z 속성은 공유되지 않는다.\n  z = 40;\n  console.log(arguments[2]); // undefined\n\n  arguments[2] = 50;\n  console.log(z); // 40\n}\n\nA(10, 20); // call function object\n```</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Execution Context <strong>진입</strong> 및 <strong>실행 코드 처리</strong> 과정</p>\n<ul>\n<li>\n<p>Execution Context 안의 <strong>코드 실행</strong>은 두 가지 <u>기본적인 <strong>단계</strong></u>로 나뉜다.</p>\n<ul>\n<li>\n<p>Execution Context <strong>진입 과정</strong><p></p>\n</li>\n<li>\n<p>Execution Context 진입 후 <strong>실행 코드 처리</strong> 과정</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Execution Context <strong>진입 과정</strong></p>\n<ul>\n<li>\n<p>Execution Context 진입 시(<strong>실행 코드가 처리</strong> 전) <span style=\"color:#c11f1f\">VO</span> 의 새로운 <strong>속성</strong>들이 추가된다.</p>\n<ul>\n<li>\n<p>변수 선언(VariableDeclaration(<span style=\"color:#c11f1f\">VD</span>))</p>\n<ul>\n<li>\n<p><strong>undefined</strong> 로 <strong>초기화</strong>되는 <span style=\"color:#c11f1f\">VO</span> 의 새로운 <strong>속성</strong>이 추가된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// Execution Context 진입 시점</span>\n<span class=\"token comment\">// undefined 로 초기화된다</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 변수 선언</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 실행 코드 처리 후</span>\n<span class=\"token comment\">// 값이 할당된다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n</li>\n<li>\n<p>Execution Context 진입 시 <span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>동일한 이름의 <strong>변수 선언</strong>이 이미 존재할 경우 그 아래의 <strong>함수 선언</strong>은 <strong>무시</strong>된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> ```javascript\n\n // global Execution Context\n\n // 이 경우 x 는 undefined 가 아닌, function object 로 초기화된다.\n console.log(x); // x function object\n \n // 변수 선언\n var x = 1;\n\n // 동일한 이름으로 함수 선언을 한다.\n function x(){\n };\n\n // 동일한 이름의 함수 선언은 무시된다.\n console.log(x); // 1\n ```\n ![](http://mohwa.github.io/blog/assets/images/posts/20151014/context_2.png)</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>함수 선언(FunctionDeclaration(<span style=\"color:#c11f1f\">FD</span>))</p>\n<ul>\n<li>\n<p><strong>함수 객체</strong>로 <strong>초기화</strong>되는 <span style=\"color:#c11f1f\">VO</span> 의 새로운 <strong>속성</strong>이 추가된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n// global Execution Context\n\n// Execution Context 진입 시 function object 로 초기화된다.\nconsole.log(A); // function object\n\n// 함수 선언식\nfunction A(){\n\n  // function Execution Context\n}\n```</code></pre></div>\n</li>\n<li>\n<p>Execution Context 진입 시 <span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\nvar ECStack = [\n  globalExecutionContext: {\n    VO: {\n      A: &lt;reference to function> // 함수 선언식을 통한 함수는 function object 로 초기화된다.\n    }\n  }\n];\n```</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>함수 매개변수들(Function Formal parameters)</p>\n<ul>\n<li>\n<p>전달된 <strong>매개변수 값</strong>을 갖는 <span style=\"color:#c11f1f\">VO</span> 의 새로운 속성이 추가된다. 단 값이 <u>전달되지 않았을경우</u>, <strong>undefined</strong> 로 <strong>초기화</strong>된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n  // global Execution Context\n\n  // 함수 선언식\n  function A(x, y){\n\n    // function Execution Context\n\n    console.log(arguments[0]); // 1\n    // 값이 전달되지 않은 매개변수는 undefined 로 초기화된다.\n    console.log(arguments[1]); // undefined\n  }\n  \n  // A 함수를 호출한다.\n  A(1); \n```\n\n```javascript\n  var ECStack = [\n    functionExecutionContext: {\n      AO(VO): {\n        // function parameters\n        arguments: {\n          0: 1,\n          1: undefined\n        }\n        x: 1,\n        y: undefined\n      }\n    },\n    globalExecutionContext: {\n      VO: {\n        A: &lt; reference to function >\n      }\n    }\n  ];\n```</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Execution Context 진입 후 <strong>실행 코드 처리 과정</strong></p>\n<ul>\n<li>\n<p>Execution Context 진입 시점에서 초기화된 <span style=\"color:#c11f1f\">VO</span> 속성은 <strong>실행 코드 처리 후</strong> 할당된 값을 가지게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">```javascript\n// global Execution Context\n\n// Execution Context 진입 시점: undefined 로 초기화된다.\n// 실행 코드 처리 후: 1 이 할당된다.\n\n// 변수 선언\nvar x = 1;\n```</code></pre></div>\n</li>\n<li>\n<p><strong>실행 코드 처리 후</strong> <span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">VO</span> in Eval Execution Context</p>\n<ul>\n<li>\n<p><span style=\"color:#6298c1\">eval</span> 함수에서는 <span style=\"color:#c11f1f\">Calling Context</span> 라는 <strong>개념</strong>이 존재하며, 이것은 <u><span style=\"color:#6298c1\">eval</span> 함수가 <strong>호출</strong>된 Execution Context 를 가리킨다.</u><p></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// eval 함수가 global execution context 내부에서 호출되었다.</span>\n<span class=\"token comment\">// 즉 calling context 는 global execution context 를 가리킨다.</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var x = 1;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n   <span class=\"token comment\">// function execution context</span>\n\n   <span class=\"token comment\">// eval 함수가 function execution context 내부에서 호출되었다.</span>\n   <span class=\"token comment\">// 즉 calling context 는 function execution context 를 가리킨다.</span>\n   <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var y = 2;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#6298c1\">eval</span>  함수를 통해, 선언된 <strong>변수</strong>, <strong>함수</strong>는 Calling Context 내부 <span style=\"color:#c11f1f\">VO</span> 에 영향을 준다.(즉 Calling Context 내부 <span style=\"color:#c11f1f\">VO</span> 의 속성으로 할당된다)<p></p>\n</li>\n<li>\n<p><span style=\"color:#6298c1\">eval</span> 함수로 전달된 <strong>실행 코드</strong>는 생성된 Eval Execution Context 내부에서 처리된다.<p></p>\n</li>\n<li>\n<p>해당 <span style=\"color:#c11f1f\">VO</span> 는 Eval Execution Context 진입 시 <strong>생성</strong>되며, <span style=\"color:#6298c1\">eval</span> 함수 종료 시 <strong>소멸</strong>된다.</p>\n<ul>\n<li>\n<p>Global Execution Context 에서의 <span style=\"color:#6298c1\">eval</span> 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// calling context 는 global execution context 를 가리킨다.</span>\n\n<span class=\"token comment\">// eval 함수를 통해 생성된 x 속성은 해당 calling context 내부 VO 에 영향을 준다.</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var x = 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`\n      </code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  evalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  callingContext<span class=\"token operator\">:</span> globalExecutionContext<span class=\"token punctuation\">,</span>\n  globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// eval 함수로 전달된 실행 코드로 인해, calling context 내부 VO 가 영향받는다.</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>Function Execution Context 에서의 <span style=\"color:#6298c1\">eval</span> 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// global execution context</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// function execution context</span>\n\n    <span class=\"token comment\">// calling context === function execution context</span>\n\n    <span class=\"token comment\">// x 지역 변수르 선언한다.</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// eval 함수를 통해, 변수를 선언한다.</span>\n    <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var y = 2;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n    <span class=\"token comment\">// y 속성은 calling context 내부 VO 에 영향을 준다.</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  evalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 호출 문맥</span>\n  callingContext<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> functionExecutionContext<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> functionExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">AO</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VO</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// eval 함수로 전달된 실행 코드로 인해, calling context 내부 VO 가 영향받는다.</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span> reference to <span class=\"token keyword\">function</span> <span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>단 <strong>ES5</strong> <span style=\"color:#c11f1f\">strict-mode</span> 에서의 <span style=\"color:#6298c1\">eval</span> 함수는 Calling Context 내부 <span style=\"color:#c11f1f\">VO</span> 에 영향을 주지 않으며, 코드를 <strong>지역 샌드박스</strong>(local sandbox)에서 평가하게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// global Execution Context</span>\n\n<span class=\"token comment\">// calling context 는 global Execution Context 를 가리킨다.</span>\n\n<span class=\"token comment\">// x 변수를 선언한다.</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// eval 함수를 통해, 선언된 변수는 해당 calling context 에 영향을 주지않으며, local sandbox 안에서 평가하게된다.</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'var y = 2;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// calling context 내부 VO 에 영향을 주지 않는다.</span>\n<span class=\"token comment\">// local sandbox 외부에서 y 속성을 접근할 수 없다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: y is not defined</span></code></pre></div>\n</li>\n<li>\n<p><span style=\"color:#c11f1f\">ECStack</span> 내부</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ECStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// local sand box</span>\n  evalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 호출 문맥</span>\n  callingContext<span class=\"token operator\">:</span> globalExecutionContext<span class=\"token punctuation\">,</span>\n  globalExecutionContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">VO</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// y 속성이 추가되지 않았다(즉 해당 calling context 내부 VO 에 영향을 주지 않는다)</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2>참고 URL</h2>\n<ul>\n<li>\n<p><a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/\">ECMA-262-3 IN DETAIL. CHAPTER 2. VARIABLE OBJECT</a></p>\n</li>\n<li>\n<p><a href=\"http://huns.me/development/189\">ECMA-262-3 IN DETAIL. CHAPTER 2. VARIABLE OBJECT 번역 글</a></p>\n</li>\n<li>\n<p><a href=\"http://www.nextree.co.kr/p4150/\">Javascript : 함수(function) 다시 보기</a></p>\n</li>\n<li>\n<p><a href=\"http://javascriptweblog.wordpress.com/2010/08/09/variables-vs-properties-in-javascript/\">Variables vs. Properties in JavaScript</a></p>\n</li>\n<li>\n<p><a href=\"https://gist.github.com/Integralist/1525419\">JavaScript Execution</a></p>\n</li>\n<li>\n<p><a href=\"https://msdn.microsoft.com/ko-kr/library/br230269(v=vs.94).aspx\">Strict 모드</a></p>\n</li>\n</ul>","frontmatter":{"title":"Variable Object in JS","date":"October 14, 2015","description":"JavaScript VO 객체에 대해 알아보기"}},"previous":{"fields":{"slug":"/2015-10-14-variable-inJS/"},"frontmatter":{"title":"Variable in JS"}},"next":{"fields":{"slug":"/2015-10-15-function-inJS/"},"frontmatter":{"title":"Function in JS"}}},"pageContext":{"id":"a7b0b34c-36b6-5c06-8119-7d2b04641e85","previousPostId":"234c7070-16f4-5a5a-8057-6e05e5e3e1b7","nextPostId":"32e99242-2c2c-5099-aac5-83c3362c46bf"}},
    "staticQueryHashes": ["2841359383","3257411868"]}