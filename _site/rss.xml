<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
>

<channel>
    <title><![CDATA[Mohwa blog]]></title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <link href="/" />
    <description><![CDATA[]]></description>
    <lastBuildDate>Tue, 14 Jul 2015 16:27:35 +0900</lastBuildDate>
    <language>en-US</language>
    <generator uri="http://octopress.org/">Octopress</generator>

    
        <item>
            <title><![CDATA[Interface]]></title>
            <link>/blog/2015/07/10/interface/</link>
            <pubDate>Fri, 10 Jul 2015 23:48:01 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"yanione", "github"=>"mohwa"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[Interface]]></category>
        
            <category><![CDATA[C#]]></category>
        
            <category><![CDATA[C++]]></category>
        
            <category><![CDATA[JAVA]]></category>
        
            <category><![CDATA[JavaScript]]></category>
        
            <guid>/blog/2015/07/10/interface/</guid>
            <description>
                <![CDATA[인터페이스 1. 정의 가장 큰 범위의 인터페이스 정의는 사물 간 또는 사물과 인간 간(User Interface)의 의사소통을 위한 중간 &quot;매개체&quot; 다. 즉 서로간의 의사소통을 위해 정해진 약속이 존재하며, 이를 표준 규격 이라 말할 수 있는것이다. 2. 의미 인터페이스(DB Interface): 구현 클래스가 공통적으로 가져야할 필수 특성(connect, disconnect 등)들을 선언함으로써, 해당 구현 클래스들에게...]]>
            </description>
            <content:encoded>
                <![CDATA[<h1>인터페이스</h1>

<h2>1. 정의</h2>

<ul>
<li>가장 큰 범위의 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4">인터페이스</a> <code>정의</code>는 사물 간 또는 사물과 인간 간(<a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9A%A9%EC%9E%90_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4">User Interface</a>)의 의사소통을 위한 중간 <span style="color:red">&quot;매개체&quot;</span> 다. 즉 서로간의 의사소통을 위해 정해진 약속이 존재하며, 이를 <code>표준 규격</code> 이라 말할 수 있는것이다.</li>
</ul>

<h2>2. 의미</h2>

<p><img src="/Users/sgjeon/blog_doc/img/interface_diagram.png?4" alt=""></p>

<ul>
<li><p><strong>인터페이스</strong>(DB Interface):</p>

<ul>
<li><p><strong>구현 클래스</strong>가 공통적으로 가져야할 필수 <span style="color:red">특성</span>(connect, disconnect 등)들을 <strong>선언</strong>함으로써, 해당 구현 클래스들에게 <strong>사용자</strong>(User Class)와의 <strong>의사 소통</strong> 방침(<span style="color:red">&quot;표준 규격&quot;</span>)을 알리는데 목적이 있다.</p>

<ul>
<li><em>인터페이스 내부에 선언된 모든 특성은 구현 클래스를 통해 반드시 구현되어야 한다</em></li>
</ul></li>
</ul></li>
<li><p><strong>구현 클래스</strong>(MSSQL, ORACLE API Class 등):</p>

<ul>
<li><p>사용자(User Class)와의 의사소통을 위해 인터페이스 내부에 선언된 모든 특성들을 충실히 구현한다.</p>

<ul>
<li><em>이때 사용자 입장에서는 특정 ==구현 클래스== 명세없이도, ==인터페이스== 명세에 따라 제공받은 모든 API 를 사용할 수 있다는 장점이 존재한다.</em>(정확히 말하면, 특정 API 의 모든 기능이 아닌 인터페이스를 구현한 기능에 한정된다)</li>
</ul></li>
</ul></li>
</ul>

<h2>3. 상황에 따른 의미</h2>

<ul>
<li><p>만약 운영중인 어플리케이션의 DB 플랫폼이 <strong>MSSQL</strong> 에서 <strong>PostgreSQL</strong> 로 변경된다고 생각해보자.(오랜 기간 운영중인 어플리케이션의 경우 이런저런 이유로 이와 같은 상황이 충분히 올 수 있다)</p>

<p>이때 위와 같은 인터페이스 설계가 되어있다면, <strong>PostgreSQL</strong> 규격에 따라 해당 인터페이스만 구현하면 최소 비용으로 기능을 <strong>확장</strong>할 수 있을 것이다.</p>

<ul>
<li><em>사용자 입장에서보면, 인터페이스를 통해 구현된 공통적인 기능에 대해서 만큼은 기존 코드를 ==재사용==할 수 있다는 큰 장점이 존재하게 되는 것이다.(어플리케이션 유지보수 비용 ==최소화==)</em></li>
</ul></li>
</ul>

<h2>4. JS 로 인터페이스 구현해보기</h2>

<iframe width="100%" height="1000" src="http://jsfiddle.net/mohwa/jzu5r06e/3/embedded/js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<ul>
<li><p>JS 인터페이스 구현은 아래 <strong>C# 인터페이스 가이드</strong>에 맞춰 구현되었으며, JS 코드에 대한 자세한 설명은 따로 하지 않겠다.(만약 JS 에 대해 어느정도 알고 있는 상황이라면, 코드를 분석해보길 권장한다)</p>

<ul>
<li>위 코드에 대한 간단한 설명은 아래와 같다.</li>
</ul>
<div class="highlight"><pre><code class="language-text" data-lang="text">1. 인터페이스 선언을 위한 인터페이스 함수 객체를 구현한다.

    - 인터페이스 **[이벤트]** 선언을 위해 **Observer** 함수 객체를 구현한다.
        - *[C# 이벤트 선언](https://msdn.microsoft.com/ko-kr/library/awbftdfh.aspx)*

2. 인터페이스를 상속받은 **구현 클래스**를 검증(상속받은 인터페이스를 모두 구현했는지에 대한 검증)하는 함수 객체(==Interface.ensureImplement==)를 구현한다.

3. 이전 다이어그램과 같이 **인터페이스** 및 각 **클래스**(구현 클래스)들을 구현한다.
</code></pre></div>
<ul>
<li><a href="https://msdn.microsoft.com/ko-kr/library/ms173156.aspx">C# 인터페이스</a>(인터페이스 정의는 각 언어마다 조금씩 차이를 보인다)</li>
<li><em>위 코드는 JS 인터페이스 구현 뿐 아니라, 이전 다이어그램에 명시된 ==[인터페이스]==, ==[구현 클래스]==, ==[사용자 클래스]== 부분까지 전부 작성되었다.</em></li>
</ul></li>
</ul>

<h2>5. 정리</h2>

<ul>
<li><p><strong>인터페이스</strong>는 개발 중인 어플케이션 규모 및 설계에 따라 적용 범위가 얼마든지 달라질 수 있다.(또는 사용이 불필요할 수 도 있다(간혹 팀내에서의 <strong>관행</strong>적인 적용이 있다는 말을 들은적이 있는데 이건 정말 아닌듯 하다;;;))</p>

<ul>
<li><em>너무 당연한 말일 수 도 있지만, 인터페이스와 같은 모든 디자인 패턴은 적재 적소에 활용해야만 득이되는 것이다.</em></li>
</ul></li>
<li><p>위에서 언급한 내용과 다른 <strong>적용 사례</strong>에 대해(<em>그럼 어떤 상황이 더 있을까?) 한번쯤 심도있게 생각해보길 바란다</em></p></li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[루비 온 레일즈로 블로그 만들기]]></title>
            <link>/blog/2015/05/05/web-application-architecture/</link>
            <pubDate>Tue, 05 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"yanione", "github"=>"mohwa"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[Coursera]]></category>
        
            <category><![CDATA[ruby]]></category>
        
            <category><![CDATA[rails]]></category>
        
            <category><![CDATA[ror]]></category>
        
            <category><![CDATA[blog]]></category>
        
            <guid>/blog/2015/05/05/web-application-architecture/</guid>
            <description>
                <![CDATA[뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌인 Web Application Architectures를 수강한 내용을 정리해 보았다. 루비도 잘 모르고, 레일즈도 잘 모르는 상황에서 기록을 위해 정리했고, 번역에 시간을 들일 상황이 없어서 그냥 영문으로 남겨버린 경우도 많아서 읽는 분들한테는 좋은 포스팅이 되지는 않는 것 같다. 지송ㅎㅎ 간략하게 살펴보고 위 강좌의 링크에서 직접 강연을...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌인 <a href="https://class.coursera.org/webapplications-003">Web Application Architectures</a>를 수강한 내용을 정리해 보았다. 루비도 잘 모르고, 레일즈도 잘 모르는 상황에서 기록을 위해 정리했고, 번역에 시간을 들일 상황이 없어서 그냥 영문으로 남겨버린 경우도 많아서 읽는 분들한테는 좋은 포스팅이 되지는 않는 것 같다. 지송ㅎㅎ 간략하게 살펴보고 위 강좌의 링크에서 직접 강연을 듣는 것이 좋을 것 같다. 대체적으로 강의 내용이 쉽고 친절하게 진행되기 때문에 루비와 레일즈 초보자에게는 괜찮은 강좌라고 생각된다.</p>

<p>루비 언어에 대한 부분은 글이 너무 길어져 며칠 전 <a href="http://nolboo.github.io/blog/2015/05/03/ruby-basic/">루비 언어 기초</a>로 별도 정리하였다.</p>

<h2>Design Pattern</h2>

<p>디자인 패턴이란 특별한 맥락 안에 있는 일반적인 디자인 문제를 풀기위해 객체와 클래스의 상호작용에 대해 설명하는 것이다.</p>

<p>디자인 패턴은 계속해서 재사용할 수 있는 추상적인 템플릿이다.</p>

<h3>3-Tier Architecture</h3>

<ul>
<li><strong>Presentation tier</strong> : User’s web browser.</li>
<li><strong>Application (logic) tier</strong> : The web server and logic associated with
generating dynamic web content, e.g., collecting and formatting the
results of a search.</li>
<li><strong>Data tier</strong> : A database.</li>
</ul>

<h3>6-Tier Web Application Architecture</h3>

<p>The <strong>Application tier</strong> is often subdivided into two tiers:<br>
- <em>Business logic tier</em> : Models the business objects associated with the<br>
application, e.g., accounts, inventories, etc., and captures the business<br>
rules and workflows associated with how these processes can be<br>
processed and manipulated.<br>
- <em>Data access tier</em> : Responsible for accessing data, and passing it to the<br>
business logic tier, e.g., account balances, transactions, etc.</p>

<p>The <strong>Presentation tier</strong> is often subdivided into two tiers:<br>
- <em>Client tier</em> : client-side user interface components.<br>
- <em>Presentation logic tier</em> : server-side scripts for generating web pages.</p>

<p>Finally, the web server is often separated out into its own <strong>Web tier</strong>.</p>

<p><img src="https://farm9.staticflickr.com/8716/16377332113_de304045b0_o.jpg" alt=""></p>

<h2>루비온 레일즈 설치</h2>

<p>강좌에서 <a href="http://railsapps.github.io/installing-rails.html">Install Rails</a>를 바로 링크하고 있다. 꼼꼼하고 친절하게 작성된 문서이며, 덕분에 쉽게 설치할 수 있었다. 맥에서 설치하였으며 간단히 그 과정을 요약했다. 잘 안될 경우에는 <a href="http://railsapps.github.io/installrubyonrails-mac.html">Install Ruby on Rails 4.2 · Mac OS X</a>의 자세한 설명을 참고한다.</p>

<p>Xcode가 이미 설치되어 있는지 확인한다.</p>

<pre class="terminal">
xcode-select -p
/Applications/Xcode.app/Contents/Developer
</pre>

<ul>
<li>만약 결과가 <code>/Applications/Apple Dev Tools/Xcode.app/Contents/Developer</code>로 나타난다면 Xcode를 지우고 다시 설치해야한다.</li>
</ul>

<p>RVM은 Homebrew를 요구하므로 Homebrew를 먼저 설치한다.</p>

<pre class="terminal">
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</pre>

<p>RVM을 설치한다.</p>

<pre class="terminal">
\curl -L https://get.rvm.io | bash -s stable --ruby
</pre>

<ul>
<li>RVM 설치 관련 한글 추천글: <a href="http://bit.ly/1Fc8SDT">멘붕없이 RVM과 루비 설치하기</a> </li>
</ul>

<p>RVM을 최신판으로 업데이트하고 Ruby를 설치한다.</p>

<pre class="terminal">
rvm get stable --autolibs=enable
rvm install ruby
rvm --default use ruby-2.2.0
</pre>

<p>RubyGems의 버전을 체크하고 업데이트 한다.</p>

<pre class="terminal">
gem -v
gem update --system
</pre>

<p>빠른 Gem 설치를 위해 도큐먼트를 설치하지 않게 할 수 있다.</p>

<pre class="terminal">
echo "gem: --no-document" >> ~/.gemrc
</pre>

<p>Nokogiri를 설치한다.</p>

<pre class="terminal">
gem install nokogiri
</pre>

<p>최신 안정판 Rails를 설치한다.</p>

<pre class="terminal">
rvm use ruby-2.2.0@rails4.2 --create
gem install rails
rails -v
</pre>

<p>프로젝트 디렉토리에 gemset를 만들고 레일즈를 설치하고 새 앱을 만드는 방법은 다음과 같다:</p>

<pre class="terminal">
mkdir myapp
cd myapp
rvm use ruby-2.2.0@myapp --ruby-version --create
gem install rails
rails new .
</pre>

<ul>
<li><code>--ruby-version</code> 옵션은 루트 디렉토리에 <code>.ruby-version</code>과 <code>.ruby-gemset</code> 화일을 만든다. RVM이 앱의 루트 디렉토리에 있는 이 파일을 인식하고 Ruby 버전과 gemset을 로드한다. 초보자에게 추천되는 <code>rails new myapp</code> 명령보다는 이런 접근이 더 쉽다.(그러나 설치 문서와 달리 본 강의에서는 <code>rails new myapp</code>으로 가르친다:;)</li>
</ul>

<p>잘 작동하는지 점검하기 위해 smoke test를 한다.</p>

<pre class="terminal">
rake -T
</pre>

<p>RVM을 사용하면 <code>rake</code> 대신 <code>bundle exec rake</code>를 실행할 필요가 없다.</p>

<p>웹서버를 실행하고:</p>

<pre class="terminal">
rails server
</pre>

<p>웹브라우저에서 <code>http://localhost:3000</code>를 열면 레일즈 초기 화면이 등장한다.</p>

<h3>레일즈 기본 디렉토리 구조</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">.   RAILS.root
├── app         : Model/View/Controller 코드
├── bin         : Helper 스크립트(bundle, rails, rake)
├── config      : App, database, route 환경설정
├── db          : Database schema and migration
├── *Gemfile*   : 요구되는 gem을 지정 
├── lib         : 
├── log         : 앱 로그
├── public      : 앱의 웹루트
├── test        : 테스트
├── tmp         :
└── vendor      :
</code></pre></div>
<h3>참고 링크</h3>

<ul>
<li><a href="https://www.ruby-lang.org/ko/documentation/installation/">루비 설치하기</a></li>
<li><a href="http://bigmatch.i-um.net/2013/12/%EB%A9%98%EB%B6%95%EC%97%86%EC%9D%B4-rvm%EA%B3%BC-%EB%A3%A8%EB%B9%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/">멘붕없이 RVM과 루비 설치하기 | Bigmatch</a></li>
<li><a href="https://www.youtube.com/watch?v=lBnO2xvwO0k">Install Rails On Mac OS</a>: 국내 RoRLab 동영상</li>
</ul>

<h2>블로그 만들기</h2>

<p>동작하는 블로그를 만들기 위해서는 다음 명령어를 순서대로 입력하면 된다:</p>

<pre class="terminal">
rails new blog
cd blog
bundle install
rails generate scaffold post title:string body:text
rails generate scaffold comment post_id:integer body:text
rake db:migrate
rake routes
rails server
</pre>

<p><code>http://localhost:3000/posts#index</code>에서 첫번째 포스트를 입력한다. <code>http://localhost:3000/comments</code>에서 댓글을 입력할 수 있다.</p>

<p>블로그 데이타 베이스가 생성되었는지 살펴보는 툴을 소개한다:</p>

<ul>
<li><a href="http://sourceforge.net/projects/sqlitebrowser/">DB Browser for SQLite</a></li>
<li><a href="https://addons.mozilla.org/en-Us/firefox/addon/sqlite-manager/">SQLite Manager :: Add-ons for Firefox</a></li>
</ul>

<h3>CRUD</h3>

<p>– Create<br>
– Read<br>
– Update<br>
– Destroy</p>

<h3>Rails philosophy is based upon three principles:</h3>

<ul>
<li>Convention over Configuration : Common aspects of a web
application are provided (i.e., preconfigured) for you, so use them,
rather than fight against them!
Ideally, the developer should only have
to specify the unconventional aspects of the application.</li>
<li>Don’t Repeat Yourself (DRY) : Every piece of information should
have a single, unambiguous, authoritative representation within a
system. Duplication of code fragments throughout an application can
lead to logical contradictions, and in general make the application
more difficult to maintain.</li>
<li>Agile Development : Software development methodologies based on
iterative and incremental development, where requirements and code
evolve with minimal planning through self-organizing, cross-functional
teams</li>
</ul>

<p>레일즈에 대한 더 자세한 설명은 공식문서 <a href="http://rubykr.github.io/rails_guides/">Ruby on Rails 가이드</a>를 살펴보는 것도 좋다.</p>

<h2>Git</h2>

<p><img src="https://farm9.staticflickr.com/8774/16852966429_23481ee4d4_o.jpg" alt=""></p>

<pre class="terminal">
git init
</pre>

<p>위의 깃 초기화 명령을 실행하면 깃에서 레일즈 디렉토리를 인식해서 다음과 같이 제외할 파일을 미리 설정해준다.(오떰!)</p>

<pre class="terminal">
# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*
!/log/.keep
/tmp
</pre>

<p>변경 사항을 추가하고 커밋한다.</p>

<pre class="terminal">
git add .
git commit -m "2nd commit"
</pre>

<p>위의 두 명령어를 한번에 실행할 수도 있다.</p>

<pre class="terminal">
git commit -a -m "2nd commit"
</pre>

<p>깃에 대한 내용은 제 블로그의 <a href="http://nolboo.github.io/blog/2013/10/06/github-for-beginner/">완전 초보를 위한 깃허브</a>를 참조한다.</p>

<h2>Relational Database</h2>

<ul>
<li><strong>schema</strong> : The structure/organization of the tables in a database</li>
<li><strong>entity-relationship model</strong> is a common way of abstractly capturing
a database schema</li>
</ul>

<p><a href="https://www.mysql.com/products/workbench/">MySQL Workbench</a>와 같은 툴 등을 이용하여 EER Diagram(enhanced entity relationship diagram)에 익숙해질 필요가 있다.</p>

<h3>Rails Databases</h3>

<ul>
<li>Development</li>
<li>Test</li>
<li>Production</li>
</ul>

<p><code>rails server</code> 명령은 개발자 모드에서 레일즈를 실행한다. 다른 모드로 실행하려면:</p>

<pre class="terminal">
rails server -e production
</pre>

<p>레일즈에 포함된 인기있는 프로덕션 데이타베이스는 <strong>PostgreSQL</strong>와 <strong>MySQL</strong>이다.</p>

<p>각각의 모드에서 사용하는 레일즈 데이터베이스는 <code>db/database.yml</code>에서 지정한다.</p>

<h4>Active Record Design Pattern</h4>

<p>Active Record pattern은 관계형 데이터베이스에 저장된 데이터를 접근할 때 사용된다. 특정 데이터베이스(SQLite, MySQL, PostgreSQL, SQL Server, Oracle 등)에 대한 걱정없이 CRUD 작업을 수행한다.</p>

<ul>
<li><p><strong>There’s a big problem</strong>: The classes and objects associated with an OO language are incompatible with the structure of relational databases.</p></li>
<li><p><strong>Active Records to the Rescue</strong>: This design pattern encapsulates that<br>
notion an object-relational mapping (ORM), i.e., a mapping between OO language constructs and relational databases constructs.</p></li>
</ul>

<p>The ORM provided by Active Records automatically converts object into constructs that can be stored in a database (and converts them back upon retrieval).</p>

<p>This creates, in effect, a “virtual object database” that can be used<br>
from within an OO language</p>

<h4>Active Records in Ruby</h4>

<p>The Active Record design pattern is provided in a Ruby module called <code>ActiveRecord</code>.</p>

<p>Using the functionality provided by this module you can:<br>
– Establish a connection to a database.<br>
– Create database tables.<br>
– Specify associations between tables that correspond to associations between the Ruby classes.<br>
– Establish an ORM between Ruby classes/objects/attributes and the tables/rows/columns in the underlying database.<br>
– Peform CRUD operations on Ruby ActiveRecord objects.</p>

<p><strong>The <code>ActiveRecord</code> module is built into Rails</strong> – the functionalities above are utilized when you create a Rails app and run scaffold and model generators.</p>

<p>The <code>ActiveRecord::Base.establish_connection</code> method uses the information in <code>./conifg/database.yml</code> in order to connect a Rails application to a database.</p>

<p>The <code>ActiveRecord::Migration</code> object is used to incrementally evolve your database schema over time – migrations update the <code>./db/schema.rb</code> file.</p>

<p>The <code>ActiveRecord::Schema.define</code> method, in <code>./db/schema.rb</code>, is created by inspecting the database and then expressing its structure programmatically using a portable (database-independent) DSL. This can be loaded into any database that <code>ActiveRecord</code> supports</p>

<h4><code>ActiveRecord</code> Module</h4>

<p>If you create a new class by inheriting <code>ActiveRecord::Base</code>, and call it <code>Post</code>, it is assumed a database table will exist that is called <code>posts</code>. I.e., it pluaralizes the name of the class, and then looks for a table with that name.</p>

<p>The <code>Base</code> class in the <code>ActiveRecord</code> module will inspect the <code>posts</code> database, and determine that it has <code>title</code> and <code>body</code> fields, and it will automatically add member variables (and accessors) with these same names in the<br>
<code>Post</code> class. I.e., it takes care of the ORM!</p>

<p>Furthermore, a query interface is also provided – in most cases, <code>ActiveRecord</code> insulates you from the need to use SQL.<br>
Ex.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Post.all
Post.first
Post.find_by(1)
Post.find_by_title(&quot;My First Post&quot;)
</code></pre></div>
<h4>Associations</h4>

<p>| Relationship | Model with no foreign key | Model with foreign key |<br>
|--------------|---------------------------|------------------------|<br>
| one-to-one   | has_one                   | belongs_to             |<br>
| many-to-one  | has_many                  | belongs_to             |<br>
| many-to-many | has_and_belongs_to_many   | *                      |</p>

<p><code>/models/post.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">has_many :comments, dependent: :destroy
</code></pre></div>
<p><code>/models/comments.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">belongs_to :post
</code></pre></div>
<p>를 추가하여 두 개의 모델을 연결하고, 포스트가 지워지면 댓글도 지워지도록 한다.</p>

<p><code>rails console</code>을 실행한 후:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">p = Post.all
p[0].comments
p[0].comments.size

Comment.all
p[1].destory
Comment.all
Post.all
</code></pre></div>
<p><code>rake routes</code>로 현재의 URL을 확인해보면 포스트와 댓글이 따로 되어있다. 포스트 다음에 댓글이 오도록 하려면:</p>

<p><code>/config/routes.rb</code>에서 다음과 같이 변경한다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">resources</span> <span class="ss">:comments</span>
  <span class="n">resources</span> <span class="ss">:posts</span> <span class="k">do</span>
    <span class="n">resources</span> <span class="ss">:comments</span>
  <span class="k">end</span>
</code></pre></div>
<p>이제 <code>rake routes</code>로 확인해보면 <code>post_id/comments</code>와 같이 URL이 생성된다.</p>

<h4>Data Validation</h4>

<p>Data Validation은 사용자의 유효한 입력을 유도하기 위해서도 필요하지만, 일반적인 웹앱의 보안 약점인 SQL injection, cross-site scripting, buffer overflow attacks 등을 피하기 위해서도 필요하다.</p>

<h4>ActiveRecord Callbacks</h4>

<p><code>ActiveRecord</code> 객체는 라이프 사이클의 다양한 국면에서 integrity를 확실하게 하도록 호출 매서드를 갖는다.<br>
Ex.<br>
– Don’t create a new user object if the user already exists in the<br>
database.<br>
– Ensure that all of an object’s attributes are valid before allowing it to<br>
be saved to the database.<br>
– When destroying an object, destroy all of the objects that depend on it</p>

<p>Callbacks은 객체의 변화가 있을 때 작용되는 매서드이며, 일종의 훅이다.</p>

<h4>ActiveRecord Validations</h4>

<p><strong>Validations</strong>는 <code>ActiveRecord</code> 콜백의 하나이며, model에서 정의된다. <br>
예를 들면:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="n">validates_presence_of</span> <span class="ss">:name</span>
<span class="n">validates_numericality_of</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:only_integer</span> <span class="o">=&gt;</span> <span class="kp">true</span>
<span class="n">validates_</span> <span class="n">confirmation_of</span> <span class="ss">:email</span>
<span class="n">validates_length_of</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:in</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="o">.</span><span class="n">.</span><span class="mi">20</span>
</code></pre></div>
<p><code>/models/post.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">validates_presence_of :title
validates_presence_of :body
</code></pre></div>
<p><code>/models/comment.rb</code>에서</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">validates_presence_of :post_id
validates_presence_of :body
</code></pre></div>
<p>를 삽입하고, <code>rails server</code>를 실행하여, 확인한다.</p>

<h2>Ruby</h2>

<p><a href="http://nolboo.github.io/blog/2015/05/03/ruby-basic/">루비 언어 기초</a>에 별도로 정리하였다.</p>

<h2>Middleare</h2>

<p>미들웨어는 클라이언트-서버 구조에서 OS와 앱 사이의 소프트웨어 접착제이다.</p>

<p>레일즈 미들웨어는 일종의 미들웨어 스택인 <strong>Rack</strong>이다. Rack은 웹서버(Mongrel, Thin, Phusion, Apache 등)와 대화할 수 있는 간결하고 통일된 인터페이스를 제공한다. 즉, Rack은 HTTP 요청과 응답을 핸들링한다. <code>Rack::Builder</code>는 웹앱에서 사용하는 스택과 같은 구조를 만든다. 레일즈 앱에 설치된 미들웨어를 보려면 앱의 루트에서 다음 명령어를 친다:</p>

<pre class="terminal">
rake middleware
</pre>

<p>Sinatra 같은 다른 루비 프레임워크도 Rack 기반이다. 시내트라는 데이타베이스 백엔드 지원이 필요없을 경우 좋은 선택이다.</p>

<p><code>rails server</code>를 실행하면 <code>Rack::Server</code> 객체가 만들어지고 웹서버(기본적으로 WEbrick)가 로드되며, 뒤이어 미들웨어 부분이 로드된다. <code>Rack::Server#start</code> 매서드는 웹서버를 가동하기 시작하고 HTTP 요청을 지정된 포트에서 기다린다.</p>

<h2>The Hypertext Transfer Protocol (HTTP)</h2>

<h3>HTTP - Client Side</h3>

<p>HTTP/1.1 request 메시지는 세 부분으로 구성된디:</p>

<ol>
<li>Request line </li>
<li>Header </li>
<li>Message body</li>
</ol>

<p><br /></p>

<h4>Request Line</h4>

<p>request line은 리소스를 지정하고, 적용될 액션(또는 request, verb, method로 불린다)이 뒤따른다. 리소스는 Universal Resource Identiﬁer (URI)로 지정한다. 주석: Uniform Resource Locator (URL)는 URI의 특정 형태이다.</p>

<p>아홉 가지의 request 형태가 있다.</p>

<ol>
<li>HEAD - the response the resource would supply to a GET request, but without the response body. </li>
<li>GET – return a representation of the resource. </li>
<li>POST – submit data (e.g., from an HTML form) to the resource, where the data is supplied in the body of the request, and the result may be the creation of a new resource, or the update of an existing one. </li>
<li>PUT – submit a representation of the resource. </li>
<li>DELETE – delete the resource. </li>
<li>TRACE – Echoes back the received requested (the client can use this to see if any changes were made by intermediate servers). </li>
<li>OPTIONS – returns the HTTP methods that the server supports for the speciﬁed resource. </li>
<li>CONNECT – converts the request connection to a transparent TCP/IP tunnel (usually to facilitate SSL through HTTPS). </li>
<li>PATCH – apply partial modiﬁcations to a resource.</li>
</ol>

<p>HEAD, GET, OPTIONS, TRACE는 안전 매서드로 불린다. 안전 매서드는 서버에 다른 영향을 미치지 않는다. 즉, 이 매서드들은 정보 검색만을 의도하며 서버 상태를 변화시키지 않는다.</p>

<p>주석: 안전한 방법으로 GET 매서드가 적용될 때에는 브라우저는 웹앱의 상태에 대한 걱정 없이 임의의 GET 요청을 만들 수 있다. 게다가 그것들은 캐시된다.</p>

<p>POST, PUT, DELETE 매서드는 서버 상태에 영향을 준다. PUT과 DELETE 매서드는 멱등<code>idempotent</code>이어야 한다. 이것은 여러 동일한 요청이 한번의 요청과 같은 효과를 가져야 한다는 것을 의미한다.</p>

<p>안전 매서드도 서버 상태를 변경시키지 않기 때문에 멱등이다.</p>

<h4>Header</h4>

<p>HTTP 메시지 헤더는 HTTP 요청의 첫번째 부분이다. It contains the operating parameters of an HTTP request. Header ﬁelds start with the ﬁeld name, followed by a colon, and then the ﬁeld value. E.g., the Accept ﬁeld speciﬁes the content types that are acceptable to the client. <br>
Ex. Accept: text/plain </p>

<p>The Accept-Language header speciﬁes the languages that are acceptable to the client. <br>
Ex. Accept-Language: en-US </p>

<p>Field names and values may be any application-speciﬁc strings, but a core set of ﬁelds is standardized by the Internet Engineering Task Force (IETF). </p>

<p>HTTP 메시지 헤더는 메시지 바디와 공란으로 나누어져야 한다.</p>

<h4>Message Body</h4>

<p>메시지 바디는 선택적이다. 메시지 요청에서 메시지 바디는 대체로 유저가 입력한 데이터나 서버로 업로드하는 화일이다. </p>

<p>바디가 있는 HTTP 요청은 헤더 라인에 바디를 기술한다.<br>
Ex. <br>
<code>The Content-Type</code>: speciﬁes the MIME-type of the data in the message body, such as <code>text/html</code> or <code>image/gif</code>. </p>

<p>The Content-Length: speciﬁes the number of bytes in the message body.</p>

<h3>HTTP - Server Side</h3>

<p>HTTP/1.1 응답 메시지는 요청 메시지와 비슷하고, 다음 세 부분으로 이루어진다:</p>

<ol>
<li>Response line </li>
<li>Header </li>
<li>Message body </li>
</ol>

<p>After delivering the response, the server closes the connection (the default behavior with HTTP 0.9 and 1.0). With HTTP 1.1, a persistent connection is assumed by default.</p>

<p><br /></p>

<h4>Response Line</h4>

<p>서버가 제공하는 응압의 첫번째 줄이며, <strong>status line</strong>이라고 불린다. status line은 세부분으로 이루어진다:</p>

<ol>
<li>The HTTP version, in the same format as in the message request, e.g., HTTP/1.1. </li>
<li>A response status code that provides the result of the request. </li>
<li>An English reason phrase describing the status code. </li>
</ol>

<p>Ex. </p>

<p>HTTP/1.1 200 OK <br>
HTTP/1.1 404 Not Found</p>

<p>The status codes associated with the status line belong to done of ﬁve categories: <br>
1. 1xx (Provisional Response) - A provisional response that requires the requestor to take additional action in order to continue. e.g., 100, the Continue status code, indicates that the requester should continue with the request. 101, the Switching Protocols status code, the requestor has asked the server to switch protocols (e.g., HTTPS) and the server is acknowledging that it will do so. <br>
2. 2xx (Successful) - The server successfully processed the request. <br>
3. 3xx (Redirected) - Further action is needed to fulﬁll the request. Often, these status codes are used for redirection. <br>
4. 4xx (Request Error) - There was likely an error in the request which prevented the server from being able to process it. <br>
5. 5xx (Server Error) - The server had an internal error when trying to process the request. </p>

<h4>Header</h4>

<p>The header ﬁelds in the response allow the server to pass additional information about the response which cannot be placed in the status line. </p>

<p>These header ﬁelds have the same format as in the request, and give information about the server and about further access to the resource identiﬁed by the request URI. </p>

<p>Example response ﬁelds in the header include: </p>

<p>Accept-Ranges – Allows the server to indicate its acceptance of range requests for a resource. <br>
Age – Sender’s estimate of the amount of time since the response was generated at the origin server. <br>
Location – Used to redirect the recipient to a location other than the request URI for completion of the request or identiﬁcation of a new resource. <br>
Proxy-Authenticate – Allows the client to identify itself (or its user) to a proxy which requires authentication.</p>

<h4>Message Body</h4>

<p>The message body in the response must also be preceded by a blank line. </p>

<p>The response to a HEAD request does not include a message body. All other responses do include a message body, although it may be of zero length. </p>

<p>The requested resource, e.g., the actual HTML, is included in the message body of the response.</p>

<h3>HTTP Secure</h3>

<p>The HTTP Secure protocol (HTTPS) is a combination of the HTTP and SSL/TLS protocols. Thus, it makes use of the public key infrastructure. </p>

<p>HTTPS enhances the HTTP protocol by providing encrypted communication and secure web server identiﬁcation. </p>

<p>The HTTPS protocol is often used for processing payments in web applications, or for handling other sensitive transactions. </p>

<p>The trust associated with HTTPS is based on the major certiﬁcate authorities, whose software comes pre-installed in the browser. I.e., what is really happening is that your browser must trust some certiﬁcate authority (e.g. VeriSign/Microsoft/etc.) so that it can tell your browser whom it should trust. </p>

<p>HTTPS URLs begin with “https://...&quot; and uses port 443 by default.</p>

<ul>
<li><a href="http://smallbiztrends.com/2015/04/changing-from-http-to-https.html">What You Need to Know About Changing From Http to Https</a></li>
</ul>

<h3>The Model-View-Controller Design Pattern</h3>

<p>미들웨어에 적용되는 MVC 아키텍처 다자인 패턴은 많은 웹앱 프레임워크에서 사용되며, 최근 웹앱의 복잡함을 다루는 방법으로 소개되어 왔다:<br>
– Decouples data (model) and presentation (view). <br>
– A controller handles requests, and coordinates between the model and the view. <br>
– More robust applications, easier to maintain.</p>

<p>The MVC design pattern is an architecture-level design pattern that is actually a collection of design patterns: </p>

<p>Model – The domain-speciﬁc representation of the data over which the application operates, with domain logic that adds “meaning” to raw data. A database is often used to store the data. </p>

<p>View – Renders the model in a view suitable for interaction, typically via a user interface. Multiple views can be created for a single model, each serving diﬀerent purposes. </p>

<p>Controller – Mediates between the model and the view.</p>

<p>Although there are diﬀerent varieties of MVC, the control ﬂow is generally: </p>

<ol>
<li>The user interacts with the user interface in some way (for example, by pressing a button). </li>
<li>The controller handles the input event from the user interface, often via a registered handler or callback, and converts the event into an appropriate user action, understandable for the model. </li>
<li>The controller notiﬁes the model of the user action, possibly resulting in a change in the model’s state. E.g., the controller may update the user’s account information. </li>
<li>A view queries the model in order to generate an appropriate user interface (e.g., the user’s account information). The view gets its own data from the model. In some implementations, the controller may issue an instruction to the view to render itself. In others, the view is automatically notiﬁed by the model of changes in state (Observer design pattern) that require a screen update. </li>
<li>The user interface waits for further user interactions, which restarts the control ﬂow cycle.</li>
</ol>

<h3>Rails Controllers–Request Handling</h3>

<h4>Action Pack</h4>

<p>레일즈 안에 있는 루비 <code>ActiveRecord</code> 모듈에 의해 모델(MVC에서 &#39;M&#39;)이 지원되는 방법에 대해 이미 검토해 보았다.</p>

<p>레일즈에서 뷰와 컨트롤러는 <code>Action Pack</code>으로 지원되는데, 다음 세 가지 루비 모듈로 구성된다: <code>ActionDispatch</code>, <code>ActionController</code> and <code>ActionView</code>.</p>

<p>컨트롤러는 레일즈 앱의 심장이다. – when a user connects to your Rails application, they do it by asking the application to execute a controller action. How does Rails determine the controller action it will execute? </p>

<h5>Dispatcher</h5>

<p>When an HTTP request is made to a Rails application, the ActionDispatch module is used to map that request to a particular controller action. </p>

<p>Requests are mapped to controller actions via the <code>routes</code> deﬁned in <code>./config/routes.rb</code> ﬁle. </p>

<p>We already seen that you can view the routes deﬁned in your application by executing: <br>
    $ rake routes </p>

<p>To connect a request to a controller action, you add a route to <code>./config/routes.rb</code>. </p>

<p>Examples of the various ways you can do this are provided as comments in that ﬁle.</p>

<p>Ex. Adding the following to <code>./config/routes.rb</code>: <br>
    get ’products/:id’ =&gt; ’catalog#view’ <br>
다음 URL을 사용하는 GET 요청을 매핑한다: <br>
    <a href="http://localhost:3000/products/10">http://localhost:3000/products/10</a><br>
to the view method in the CatalogContoller class, assigning the value 10 to the params[:id] hash that will be made available to all methods in that class. </p>

<p>This doesn’t look like the syntax used by the scaﬀold generator to create the routes for our posts and comments: <br>
    resources :posts <br>
    resources :comments</p>

<h5>RESTful Controllers</h5>

<p>By default, Rails controllers are <strong>RESTful</strong> and therefore use <strong>resource routing</strong>. </p>

<p>REST stands for <strong>Representational State Transfer</strong>. </p>

<p>The fundamental philosophy behind REST is that clients should communicate with servers through stateless connections, where: <br>
– Long term state is kept on the server side by maintaining a set of identiﬁable <strong>resources</strong>, <code>posts</code> and <code>comments</code> in our case. <br>
– The client can access these resources (perform CRUD operations on them) through a highly limited but uniform interface (a set of URLs in our case). <br>
– Computation proceeds by identifying the resource and the CRUD operation you’d like to perform on it.</p>

<p>A REST-based web application can be contrasted to a RPC(remote procedure call)-based web application. <br>
– In RPC-based applications, clients send requests to servers, asking them to execute a speciﬁed procedure (available on the server) using the supplied parameters. The server must advertise the services it oﬀers. SOAP is a protocol, developed by Microsoft, that supports this approach. <br>
– REST assumes a simple set of verbs (controller actions/methods) that can operate over a rich set of nouns (resources). <br>
– RPC allows for arbitrary complexity on the server side. </p>

<p>The constraints imposed by REST can lead to web applications that easier-to-write and maintain. Rather than implementing remotely accessible services, a simple interface for performing CRUD operations on resources is provided. </p>

<p>The Programmable Web, which treats the WWW as a vast collection of addressable resources, is greatly facilitated by REST.</p>

<h5>Resourceful Routes</h5>

<p>The statement in <code>./config/routes.rb</code>: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">resources :posts 
</code></pre></div>
<p>produces seven diﬀerent routes in your application, all mapping to methods in the <code>PostsController</code> class: </p>

<p>| HTTP Verb | Path            | Method  | Purpose                         |<br>
|-----------|-----------------|---------|---------------------------------|<br>
| GET       | /posts          | index   | dispaly all posts               |<br>
| GET       | /posts/new      | new     | return form for creating a post |<br>
| POST      | /posts          | create  | create a new post               |<br>
| GET       | /posts/:id      | show    | display a speciﬁc post          |<br>
| GET       | /posts/:id/edit | edit    | return form for editing a post  |<br>
| PATCH/PUT | /posts/:id      | update  | update a speciﬁc post           |<br>
| DELETE    | /posts/:id      | destroy | delete a speciﬁc post           |</p>

<h3>Rails Controllers — Request Processing</h3>

<p>In the last lecture we say how the dispatcher routes a request to a particular controller action (method). Ex. The HTTP GET request <br>
    <a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a> <br>
will route to the show method in the <code>PostsController</code> class, passing params[:id] with a value of 1 to the controller. Note: this class is deﬁned in the ﬁle: <br>
    <code>./app/contollers/posts_controller.rb</code></p>

<p>Next, the show method will use the <code>ActiveRecord#find</code> method to retrieve the post with id=1 from the database, and assign it to the instance variable <code>@post</code>. </p>

<p>Finally, the controller will pass @post to the view, i.e., to the template ﬁle: <br>
    <code>./app/views/posts/show.html.erb</code><br>
and this will be used to create the HTML that will be sent to the browser.</p>

<h4>Filters</h4>

<p>The PostsController#show method is deﬁned as follows: <br>
<code>ruby<br>
    # GET /posts/1 <br>
    # GET /posts/1.json <br>
    def show <br>
    end <br>
</code><br>
It doesn’t retrieve the post! </p>

<p>The desired post is actually retrieved from the database using a <strong>ﬁlter</strong> called <code>set_post</code>. </p>

<p><code>Filters</code> allow controllers to run shared pre and post processing code over their methods.</p>

<h4>Sessions</h4>

<p>In general, the “state” of an application which needs to persist across requests should be stored in the database. E.g., posts and comments are persisted in the database. </p>

<p>There are times when data needs to be persisted diﬀerently. E.g., the current contents of a shopping cart. </p>

<p>Whenever a user connects to a Rails application, a <strong>session</strong> is created. </p>

<p>Session data is stored in Rails using a hash structure that persists across requests, and can be accessed by controllers. <br>
Ex. <code>session[:current_user] = user.id</code> </p>

<p>A <strong>ﬂash</strong> hash is part of the session that is cleared with each request (its value is made to the next request). A controller can use this to send a message that can be displayed to the user on the next request. <br>
Ex. <br>
    ﬂash[: notice] = &#39;Post was successfully created.&#39;</p>

<h4>Response – Rendering HTML or JSON</h4>

<p>The request: <br>
    <a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a> <br>
assumes that HTML will be returned. I.e., it’s the same as: <br>
    <a href="http://localhost:3000/posts/1.html">http://localhost:3000/posts/1.html</a> </p>

<p>Rails can return other formats, e.g., JSON(Javascript Object Notation) capabilities are also provided by default. </p>

<p>Ex. The following request, will be routed to the same controller method as before: <br>
    <a href="http://localhost:3000/posts/1.json">http://localhost:3000/posts/1.json</a> <br>
However, it will be rendered using the ﬁle: <br>
    <code>./app/views/posts/show.json.builder</code> <br>
and JSON will be returned to the client.</p>

<h4>Response Format</h4>

<p>One last look at rake routes: </p>

<p>| Preﬁx     | Verb   | URI Pattern               | Controller#Action |<br>
|-----------|--------|---------------------------|-------------------|<br>
| posts     | GET    | /posts(.:format)          | posts#index       |<br>
|           | POST   | /posts(.:format)          | posts#create      |<br>
| new_post  | GET    | /posts/new(.:format)      | posts#new         |<br>
| edit_post | GET    | /posts/:id/edit(.:format) | posts#edit        |<br>
| post      | GET    | /posts/:id(.:format)      | posts#show        |<br>
|           | PATCH  | /posts/:id(.:format)      | posts#update      |<br>
|           | PUT    | /posts/:id(.:format)      | posts#update      |<br>
|           | DELETE | /posts/:id(.:format)      | posts#destroy     |</p>

<h4>Redirects</h4>

<p>Rails may also respond to an HTTP request using the <code>redirect_to</code> method. </p>

<p>This method actually tells the browser to send a new request for a diﬀerent URL. <br>
Ex. <code>redirect_to ’www.example.com’</code> </p>

<p>Rails has shortcuts for URLs within your application – they’re the preﬁx listed when you view routes: <br>
Ex. <code>redirect_to posts_url</code> <br>
will redirect to the index method in the PostsController. </p>

<p>Ex. You can assign a ﬂash message as a part of a redirection: <br>
<code>redirect_to @post, notice: ’Post was successfully created.’</code></p>

<h3>MVC Implementation in Rails</h3>

<p>In Rails, the following classes support the MVC design pattern: </p>

<p><strong>Model</strong> – The ActiveRecord class, described previously, implements object-relational mappings (ORM). </p>

<p><strong>View</strong> – Views and controllers are actually bundled together in Rails in Action Pack. Dynamic content is generated by templates containing embedded Ruby (ERb) code supported by the ActionView class. </p>

<p><strong>Controller</strong> – The ActionController class is the core of a web request in Rails. It consists of one or more actions that are executed on request and then either render a template or redirect to another action. An action is deﬁned as a public method on the controller, which will automatically be made accessible to the web-server through Rails Routes.</p>

<h4>MVC Interactions in Rails</h4>

<ol>
<li>The browser sends a request to the web server. </li>
<li>The web server processes the request, determines which route it belongs to and dispatches that request to the corresponding controller method. </li>
<li>The controller asks the model layer for all of the information needed to complete the request. </li>
<li>The model layer collects the requested information and returns it to the controller.</li>
<li>The controller gives the appropriate information to the view, requesting a particular format.</li>
<li>The view renders the information in that format and gives it back to the controller.</li>
<li>The controller assembles the total page&#39;s html and gives it to the web server.</li>
<li>The web server returns the page to the browser.</li>
</ol>

<p><img src="https://farm9.staticflickr.com/8783/17045751247_f69158209b_o.jpg" alt=""></p>

<h2>Add post&#39;s comments, new comment form, authentication</h2>

<p>자세한 소스는 비트버킷의 <a href="https://bitbucket.org/nolboo/blog/commits/7bfe88a918e40ece587f560b254b73bad0a5fbcb">해당 커밋 부분</a>을 참조한다.</p>

<blockquote>
<p><strong>HTML, CSS, Javascript에 대한 개략적인 강의 부분은 블로그를 만들기 위한 직접적인 부분을 제외하고는 이 글에선 모두 생략하였다.</strong></p>
</blockquote>

<h2>HTML – Forms</h2>

<p>완성된 폼을 제출하면(<code>submit</code>), 브라우저에서 돌아가는 <strong>user agent</strong>에서 먼저 처리된 후 서버 쪽의 <strong>processing agent</strong>(웹 서버나 메일 서버)에 제출된다.</p>

<p><code>form</code> 엘리먼트의 기본 구조는 다음과 같다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://www.example.com/log&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
<span class="c">&lt;!-- form controls and other HTML markup --&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Log In&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div>
<p><code>action</code> 속성은 폼에서 수집되는 데이터를 받을 서버 사이드의 <strong>processing agent</strong>의 URL을 지정한다.<br>
<code>method</code> 속성은 데이터를 보내기 위해 사용될 <strong>user agent</strong>의 HTTP 요청 매서드를 지정한다. HTML user agent는 다음을 지원해야 한다:<br>
1. GET – in which case the form data must be sent as part of the URL,<br>
i.e., the data is URL-encoded, and appended to the request URL.<br>
2. POST – in which case the form data must be included in the HTTP<br>
message request body.</p>

<h3>Form Submission – GET Request</h3>

<p>URL encoding works as follows — the form data is separated from the URI<br>
by a “?”, each name/value pair is separated by “&amp;”, and each name is<br>
separated from its value by a “=” (“unsafe” characters, e.g., “/” and “&amp;”,<br>
are escaped).</p>

<p>Ex.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://www.example.com&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;label&gt;</span>
    First name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;firstname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;label&gt;</span>
    Last name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;lastname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit Form&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div>
<p>Ex. 폼이 제출될 때 웹브라우저 주소창에 일어나는 것:<br>
    <code>www.example.com/?firstname=Carol&amp;lastname=Codegood</code></p>

<p>GET 매서드는 폼이 멱등일 때 사용되어야 한다. 민감한 데이터를 보낼 때는 사용하지 말아야 한다. 폼 데이터가 크거나 아스키 문자가 아니거나 바이너리 데이터일 때도 사용하지 말아야 한다. 파일은 URL로 건넬 수 없기 때문에 파일 업로드 컨트롤을 포함한 폼에서도 사용하지 말아야 한다.</p>

<h3>Form Submission – POST Request</h3>

<p>서버 사이드 처리가 결합된 폼은 데이터베이스를 변경하거나 서비스 구독 등의 side effect를 일으키기 때문에 POST 매서드를 사용해야 한다. 폼 데이터가 민감하면 HTTPS 프로토콜을 사용해야 한다.</p>

<p>Ex. 매서드 외에는 앞의 예제와 같다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;http://www.example.com&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;label&gt;</span>
    First name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;firstname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;label&gt;</span>
    Last name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;lastname&quot;</span><span class="nt">&gt;&lt;br&gt;</span>
<span class="nt">&lt;/label&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Submit Form&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div>
<p>POST 매서드인 경우 폼이 제출될 때 주소창의 URL이 변함없고(no URL encoding), 메시지 바디에 매개변수가 포함된다.(크롬 개발자 도구 등을 사용하여 네트워크 트래픽으로 볼 수 있다)</p>

<h3>Form Submission Process</h3>

<p>The user agent running in the browser identifies the successful controls, and builds a form data set — a sequence of control-name/current-value pairs for the successful controls.</p>

<p>The form data set is encoded by the user agent according to the <code>content type</code> specified in the <code>enctype</code> attribute of the <code>form</code> element.<br>
    – <code>application/x-www-form-urlencoded</code> — this is the default, form data is encoded as name-value pairs.<br>
    – <code>multipart/form-data</code> — form data is encoded as a message, with a separate part for each control.<br>
    – <code>text/plain</code> — form data is encoded as plain text.</p>

<p>The user agent submits the encoded data set to the processing agent running on the server side using the HTTP protocol method specified by the action attribute in the form.</p>

<h3>Form Controls</h3>

<p>Users interact with forms through named form controls.</p>

<p>Form controls are specified using an <code>input</code> or <code>select</code> element that must appear in the content section of the <code>form</code> element, i.e., between the <code>&lt;form&gt;</code> and <code>&lt;/form&gt;</code> tags.</p>

<p>The name of a control is specified using the <code>name</code> attribute.</p>

<p>A control has an <strong>initial value</strong> and a <strong>current value</strong>, both of which are character strings. The current value is first set to the initial value, but may change according to user supplied input.</p>

<p>Available form controls include: text, date, buttons, checkboxes, radio buttons, select boxes (drop-down lists), file select boxes, hidden controls, etc.</p>

<h4>Form Controls – Buttons</h4>

<p><strong>Button controls</strong> are specified using either the <code>button</code> element or the <code>input</code> element.<br>
The <code>type</code> attribute, which should always be specified (as different browsers have different defaults for the type), has three possible values:<br>
    - <code>submit</code> – Causes the form to be submitted.<br>
    - <code>reset</code> – Causes the form to be reset, i.e. all controls are assigned their initial values.<br>
    - <code>button</code> – Creates a push button, that typically has a client-side script associated with it through the <code>event</code> attribute. When the button is pressed and released, the associated script is executed.</p>

<p>With the <code>input</code> element, the <code>type</code> attribute may be specified as image. This creates a graphical submit button. The <code>src</code> attribute specifies the URL of the image file that will decorate the button.</p>

<p>Button controls have numerous attributes that support <strong>event-driven programming</strong>.</p>

<p>This programming style supports interactivity in browsers, i.e., you click a button (an event), the event is processed (typically by running a script) and something happens in the browser window.</p>

<p>Some of the events attributes that can be specified for a button include: <code>onblur</code>, <code>onfocus</code>, <code>onclick</code>, <code>ondblclick</code>, <code>onmousedown</code>, <code>onmouseup</code>, <code>onmouseover</code>, <code>onkeypress</code>, <code>onkeydown</code>, <code>onkeyup</code>, <code>onreset</code>.</p>

<p>For each of these attributes, the value supplied is the script that should run when the corresponding events occurs.</p>

<h4>Form Controls – Checkboxes, Radio Buttons</h4>

<p><strong>Checkboxes</strong> and <strong>radio buttons</strong> are specified using the <code>input</code> element.</p>

<ul>
<li>These are essentially “on/off” switches that can be toggled by the user.</li>
<li>Several of these controls can share the same control name.</li>
<li>A switch is “on” when the control element’s <code>checked</code> attribute is set.</li>
<li>When a form is submitted, only the “on” checkbox and radio button controls are treated as successful.</li>
<li>If several radio button controls share the same name, they are treated as mutually exclusive. I.e., when one is switched “on” all of the others with the same name are switched “off.”</li>
<li>Multiple checkboxes with the same name may simultaneously be switched “on” in a form.</li>
</ul>

<h4>Form Controls – Text Input and File Select</h4>

<p>There are two types of <strong>text controls</strong>, both of them use the <code>input</code> element, and are specified using the <code>type</code> attribute:<br>
- <code>text</code> – creates a single line text input control.<br>
- <code>textarea</code> – creates a multi-line text input control.<br>
The <strong>file select control</strong> also uses theinputelement, and the <code>type</code> attribute has the value <code>file</code>. This control allows a user to select a file, whose contents will be submitted with the form.</p>

<p>The <strong>password input control</strong> uses the <code>input</code> element, and the <code>type</code> attribute has the value <code>password</code>.<br>
With this control, user input is shown in the browser as dots or asterisks.</p>

<h4>Form Controls – Select Boxes</h4>

<p>Drop-down <strong>select boxe</strong>s are specified using the <code>select</code> element.</p>

<ul>
<li>Each choice offered by the menu is represented by an <code>option</code> element, and each <code>select</code> element must contain at least one <code>option</code> element.
The <code>optgroup</code> element allows several of the menu choices to be grouped together. These must appear directly within the select element, i.e., groups in general may not be nested.</li>
</ul>

<p>Ex.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;selColor&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">selected=</span><span class="s">&quot;selected&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>Select color<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;red&quot;</span><span class="nt">&gt;</span>Red<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;green&quot;</span><span class="nt">&gt;</span>Green<span class="nt">&lt;/option&gt;</span>
    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;blue&quot;</span><span class="nt">&gt;</span>Blue<span class="nt">&lt;/option&gt;</span>
<span class="nt">&lt;/select&gt;</span>
</code></pre></div>
<h2>Dynamic Content, Templates and Layouts</h2>

<h3>Controllers and Views</h3>

<p>The controller and view in the MVC design pattern are tightly coupled—controllers supply data to views, and controller actions are typically the targets of the links provided in views.</p>

<p>In Rails, a controller makes every instance variable it creates available to the associated view files.<br>
Ex.<br>
    – All post are retrieved in the <code>PostsController#index</code> method, and stored in the <code>@posts</code> array.<br>
    – In the <code>app/views/index.html.erb</code> file this array is accessed using an iterator:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="err">&lt;</span>% @posts.each do |post| %&gt;
<span class="nt">&lt;tr&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.title %&gt;<span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.body %&gt;<span class="nt">&lt;/td&gt;</span>
...
<span class="nt">&lt;/tr&gt;</span>
<span class="err">&lt;</span>% end %&gt;
</code></pre></div>
<h3>Dynamic HTML with ERb</h3>

<p>In Rails, dynamic content is generated using templates, and the most common templating framework is <strong>Embedded Ruby (ERb)</strong>.</p>

<p>ERb is a <strong>filter</strong> that takes a <code>.html.erb</code> template file as input and transforms it into an HTML output file as follows:<br>
    – Normal HTML content is passed through the filter without modification.<br>
    – Content between <code>&lt;%=</code> and <code>%&gt;</code> is interpreted as Ruby code and executed, with the results substituted back into the file as a string in place of the <code>&lt;%= ::: %&gt;</code> string.<br>
    – Content between <code>&lt;%</code> and <code>%&gt;</code> (no equal sign) is interpreted as Ruby code and executed, but the results are <em>not</em> substituted back into the output file.</p>

<h3>Proper Use of ERb</h3>

<p>Although ERb allows you to insert Ruby code into your view, as a matter of good design, use it sparingly!</p>

<p>E.g., in a RESTful architecture, the HTML code in ERb templates should specify the structure of the document, and the Ruby code should be used to provide (dynamic) information specific to particular<br>
resources.</p>

<p>Application-level functionality and business logic should <strong>never</strong> be found in ERb templates.</p>

<p>For generating HTML elements and formatting data in the view, there are numerous Rails helper methods – use them.</p>

<h3>Layouts</h3>

<p>In order to generate the final HTML file that will be supplied to the browser, a <strong>layout</strong> file is invoked, passing the template to it as a block.</p>

<p>By default the <code>app/views/layouts/application.html.erb</code> is used. This file is automatically created whenever you create a new Rails application.</p>

<p><strong>Advantage of layouts</strong>: By editing one file, and its associated stylesheet, we can change the look and feel of the entire site.</p>

<p>If you want to have different layouts for the different parts of a site, create a layout file that has the same name as the controller you want to associate it with, and place it in the layouts folder.</p>

<p>Ex.     <code>app/views/layouts/posts.html.erb</code></p>

<p>The <code>app/views/layouts/application.html.erb</code> file (note the yield statement):</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Blog<span class="nt">&lt;/title&gt;</span>
    <span class="err">&lt;</span>%= stylesheet_link_tag &quot;application&quot;, ... %&gt;
    <span class="err">&lt;</span>%= javascript_include_tag &quot;application&quot;, ... %&gt;
    <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="err">&lt;</span>%= yield %&gt;

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<h3>Helper Methods</h3>

<p>There are numerous helper methods that are intended to be used in ERb templates. We saw a few in the <code>application.html.erb</code> file.</p>

<ul>
<li>The <code>stylesheet_link_tag()</code> helper method generates HTML <code>&lt;link&gt;</code> tags to the application’s CSS stylesheets.</li>
<li>The <code>javascript_include_tag()</code> does the same for the application’s scripts.</li>
<li>The <code>csrf_meta_tags(</code>) method is included to prevent cross-site scripting attacks.</li>
</ul>

<p><a href="http://api.rubyonrails.org/">Ruby on Rails API</a>에서 <em>actionview:helpers</em>로 검색하여 자세한 설명을 볼 수 있다.</p>

<h2>JavaScript and Browser Security</h2>

<p>Client-side JavaScript opens up the possibility for authors to deliver malicious scripts to the browser.</p>

<p>Browsers guard against this using two strategies:</p>

<p>– JavaScript code is run in a <strong>sandbox</strong> that only allows web-related actions to be performed, not general-purpose programming tasks (no writing to disk, creating ﬁles, etc.). <br>
- JavaScript code is constrained by the <strong>same origin policy</strong> – scripts from one website do not have access to information such as usernames, passwords, or cookies from other websites.</p>

<h2>Ajax</h2>

<p>Ajax was originally an acronym that stood for Asynchronous JavaScript and XML (AJAX). </p>

<p>Ajax deals with how various technologies come together in order to provide a more interactive web browsing experience – it’s not a single technology, but a group of them working together. </p>

<p>XMLHttpRequest (XHR) is an API available to the browser via JavaScript. It’s used to send asynchronous HTTP requests to a web server and then load the server response data back into the script. </p>

<p>In spite of the name, any text data can be retrieved from the server, not just XML. Nowadays, it’s common to retrieve JavaScript Object Notation (JSON), HTML, JavaScript or plain text data. </p>

<p>The data in the script can then be used to alter the current document shown in the browser (through the DOM), without loading a new web page.</p>

<p>Ajax, jQuery &amp; Rails The jQuery library provides a full suite of Ajax capabilities (see: <a href="http://api.jquery.com/category/ajax/">http://api.jquery.com/category/ajax/</a>). </p>

<p>The <code>$.ajax()</code> method is used to initiate an asynchronous HTTP (Ajax) request. </p>

<p>An <strong>unobtrusive javascript adapter</strong> for jQuery, called <code>jquery_ujs</code>, is automatically provided in Rails. </p>

<p>Using this adapter, forms and links that have the attribute: <br>
    <code>data-remote=&quot;true&quot;</code> <br>
will be submitted using jQuery’s ajax method, i.e., using <code>$.ajax()</code>. </p>

<p>In Rails, you set this attribute using <code>remote: true</code> <br>
Ex. <br>
    &lt;%= form_for([@post, Comment.new], remote: true) do |f| %&gt;</p>

<h2>Showing a Post &amp; Comments</h2>

<ol>
<li>Identify the pieces of the page you want to dynamically load using
Ajax. (<code>show.html.erb</code>)</li>
<li>Create partial templates for the pieces of the page you want to load
dynamically. (<code>_comments.html.erb</code>)</li>
<li>Modify the form so that it uses Ajax. (<code>show.html.erb</code>,<code>remote: true</code>)</li>
<li>Modify the controller so that it can respond to a Ajax request.(<code>comments_controller.rb</code>, <code>respond_to format.js</code>)</li>
<li>Create the JavaScript code that will be returned and dynamically and
executed in the web page. (<code>create.js.erb</code>)</li>
</ol>

<p>자세한 소스는 비트버킷의 <a href="https://bitbucket.org/nolboo/blog/commits/eddf1632b928a81b52986dd866ded8746cbbc233">해당 커밋 부분</a>을 참조한다.</p>

<h2>첨언</h2>

<p>실제 소스 부분을 보면 알겠지만 실제 블로그를 만들기 위해 직접 작성해야 하는 소스의 량은 몇 십줄도 안된다. 웹앱을 만들때 레일즈를 선호하는 이유를 어렴풋이 알겠다. 그러나, 전체적인 것을 정확히 이해하려면 좀 더 많은 시간을 들여야할 것 같다. 마침 좋아하는 codecademy에 레일즈 강의가 올라와 있어 <a href="http://www.codecademy.com/learn/learn-rails">Learn Ruby on Rails | Codecademy</a>를 통해 좀 더 기본적인 것을 배우려 한다.</p>

<p>코드캐더미 강좌는 여기에 포스팅하였다.</p>

<ul>
<li><a href="http://nolboo.github.io/blog/2015/05/13/rails-codecademy/">코드캐더미로 배우는 레일즈 기초 1부</a></li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[루비 언어 기초]]></title>
            <link>/blog/2015/05/03/ruby-basic/</link>
            <pubDate>Sun, 03 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"yanione", "github"=>"mohwa"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[Coursera]]></category>
        
            <category><![CDATA[ruby]]></category>
        
            <category><![CDATA[basic]]></category>
        
            <guid>/blog/2015/05/03/ruby-basic/</guid>
            <description>
                <![CDATA[뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌 Web Application Architectures 중에서 루비 언어 기초만 별도로 정리하였다. 나머지는 루비 온 레일즈로 블로그 만들기에서 볼 수 있다. Ruby Programming Language Yukihiro Matsumoto(“Matz”)는 90년 중반에 루비를 만들었다. &quot;펄보다 강력하고 파이썬 보다 객체지향적인 스크립트 언어를 만들길 원했다.&quot; 루비는 기계보단 프로그래머에 초점을 맞쳤고, 설계 목표도...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>뉴멕시코 대학의 Greg Heileman 교수의 코세라 강좌 <a href="https://class.coursera.org/webapplications-003">Web Application Architectures</a> 중에서 루비 언어 기초만 별도로 정리하였다. 나머지는 <a href="http://nolboo.github.io/blog/2015/05/05/web-application-architecture/">루비 온 레일즈로 블로그 만들기</a>에서 볼 수 있다.</p>

<h2>Ruby Programming Language</h2>

<p>Yukihiro Matsumoto(“Matz”)는 90년 중반에 루비를 만들었다. &quot;펄보다 강력하고 파이썬 보다 객체지향적인 스크립트 언어를 만들길 원했다.&quot; 루비는 기계보단 프로그래머에 초점을 맞쳤고, 설계 목표도 프로그래머의 효율(즉, 생산성)을 최대화하기 위한 것이었다. &quot;루비가 세상의 모든 프로그래머가 생산적이고, 프로그래밍을 즐기고, 행복해지는 것을 돕길 원했다. 그게 루비 언어의 주요 목적이다.&quot;</p>

<p>Matz’s guiding philosophy for Ruby:<br>
“Ruby is designed to make programmers happy.”</p>

<ul>
<li><a href="http://web.archive.org/web/20130729205129id_/http://itc.conversationsnetwork.org/shows/detail1638.html">Yukihiro &quot;Matz&quot; Matsumoto | Ruby Design Principles</a></li>
<li><a href="http://we.weirdmeetup.com/ruby%EC%9D%98-%EC%B2%A0%ED%95%99%EC%97%90-%EA%B4%80%ED%95%9C-%EB%A7%88%EC%B8%A0%EB%AA%A8%ED%86%A0-%EC%9C%A0%ED%82%A4%ED%9E%88%EB%A1%9C%EC%9D%98-%EC%9D%B8%ED%84%B0%EB%B7%B0-part-1/">Ruby의 철학에 관한 마츠모토 유키히로의 인터뷰</a></li>
</ul>

<pre class="terminal">
ruby --version
gem list
gem install rails

ruby -e ’puts "Hello World!"’
Hello World!
</pre>

<ul>
<li><code>-e</code> 프롬프트로 인터프리터가 <code>&#39;&#39;</code>안의 루비 코드를 실행한다.</li>
<li><code>&#39;&#39;</code>안의 루비 코드를 hello.rb 파일 안에 넣고 실행하면 같은 결과가 나온다.</li>
</ul>

<pre class="terminal">
ruby hello.rb
Hello World!
</pre>

<h3>Interactive Ruby Shell(IRB)</h3>

<pre class="terminal">
irb
2.0.0p195 :001 >
</pre>

<ul>
<li>루비 앱 디렉토리의 루트에서 다음 명령으로 IRB를 실행하여, 콘솔 커맨트 라인에서 루비 앱을 직접 조작할 수 있다.</li>
</ul>

<pre class="terminal">
rails console
Loading development environment (Rails 4.0.0.rc1)
2.0.0-p195 :001 >
</pre>

<p>Ruby is a multi-paradigm programming language:</p>

<ul>
<li>Scripting – It can be used to write scripts that automate the execution
of tasks within some environment.</li>
<li>Imperative (procedure-oriented) programming – It has the traditional control structures found in imperative programs. You can create functions with variables (that store state); however, defining functions/variables outside classes actually makes them methods of the root Object class.</li>
<li>Object-oriented programming – Everything is an object, derived from
the Object class.</li>
<li>Functional programming – Computation proceeds via the evaluation of
functions that depend only on their input, not the program state.</li>
</ul>

<h3>Classes and Inheritance</h3>

<h4>Classes</h4>

<ul>
<li>클래스는 <code>class</code> 키워드와 이름으로 정의된다. 이름은 대문자로 시작하고, 캐멀케이스(CamelCase)를 사용한다.</li>
<li><code>def</code> 키워드로 매서드를 정의한다. 매서드 이름은 대문자 없이 단어를 <code>_</code>로 연결한다.</li>
<li>클래스와 매서드는 <code>end</code> 키워드로 끝낸다.<br></li>
</ul>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span>
    <span class="vi">@boo</span>            <span class="c1"># an instance variable</span>
    <span class="k">def</span> <span class="nf">my_method</span> 
        <span class="vi">@foo</span> <span class="o">=</span> <span class="mi">2</span>    <span class="c1"># an instance variable</span>
    <span class="k">end</span>
<span class="k">end</span> 

<span class="k">in</span> <span class="ss">IRB</span><span class="p">:</span>

<span class="o">&gt;</span> <span class="n">mc</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>  <span class="c1"># create a MyClass object </span>
<span class="o">&gt;</span> <span class="n">mc</span><span class="o">.</span><span class="n">my_method</span>      <span class="c1"># =&gt; 2 </span>
<span class="o">&gt;</span> <span class="n">mc</span><span class="o">.</span><span class="n">boo</span>            <span class="c1"># =&gt; error </span>
</code></pre></div>
<h4>Methods</h4>

<ul>
<li>인스턴스 변수는 매서드 정의 안에서만 접근하거나 변경할 수 있다. 아래에서는 setter 매서드로 값을 지정한 후 getter 매서드로 값을 얻을 수 있다.<br></li>
</ul>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span> 
    <span class="k">def</span> <span class="nf">boo</span>     <span class="c1"># a getter method </span>
        <span class="k">return</span> <span class="vi">@boo</span> 
    <span class="k">end</span> 
    <span class="k">def</span> <span class="nf">boo</span><span class="o">=</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>   <span class="c1"># setter method </span>
        <span class="vi">@boo</span> <span class="o">=</span> <span class="n">val</span> 
    <span class="k">end</span> 
<span class="k">end</span> 

<span class="o">&gt;</span> <span class="n">mc</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>  <span class="c1"># create a MyClass object </span>
<span class="o">&gt;</span> <span class="n">boo</span> <span class="o">=</span> <span class="mi">1</span>   <span class="c1"># =&gt; 1 </span>
<span class="o">&gt;</span> <span class="n">boo</span>       <span class="c1"># =&gt; 1</span>
</code></pre></div>
<p>루비 매서드는 implicit 리턴 값을 갖는다 - 매서드 안에서 마지막 표현식의 값이 리턴값이다. <code>return</code> 선언이 있지만 사용할 필요는 없다.</p>

<p>Ex. 두 개의 수를 비교하여 작은 것을 리턴해주는 min 매서드.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> 
    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="k">then</span> <span class="n">x</span> <span class="k">else</span> <span class="n">y</span> <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<p>매서드를 호출할 때 괄호는 선택사항이다.</p>

<h5>클래스 매서드</h5>

<p>클래스 매서드는 <code>self</code> 키워드를 앞에 놓으며, 나머지는 일반 매서드와 같다.</p>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span> 
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">cls_method</span> 
        <span class="s2">&quot;MyClass type&quot;</span> 
    <span class="k">end</span> 
<span class="k">end</span> 

<span class="o">&gt;</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">cls_method</span> <span class="c1"># =&gt; &quot;MyClass type&quot;</span>
</code></pre></div>
<p><code>Array.methods</code> 명령으로 Array 클래스의 모든 매서드를 볼 수 있다.</p>

<p>매서드 이름의 마지막 문자가 매서드의 행동을 가리쳐주기도 한다. 물음표<code>?</code>로 끝나는 매서드는 리턴값이 불린값이다. 감탄사<code>!</code>로 끝나는 매서드는 객체의 상태를 변경할 수 있으며, 객체의 본사본을 변경할 수 있는 비감탄사 버전의 매서드도 제공된다. <code>self</code> 키워드는 현재 객체를 참조하도록 객체 안에서 사용할 수 있다. </p>

<h4>Inheritance, Mixins and Extending Classes</h4>

<p>루비에선 하나의 상속만 지원된다. 멀티 상속을 위해서는 <code>mixin</code>이 기본적으로 제공된다. 클래스는 절대 닫히지 않아서 기존 클래스에 매서드를 추가할 수 있다.(작성한 클래스에도 표준 내장 클래스같이 적용된다) </p>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Fixnum</span> 
    <span class="k">def</span> <span class="nf">previous</span> 
        <span class="k">return</span> <span class="nb">self</span><span class="o">-</span><span class="mi">1</span> 
    <span class="k">end</span> 
<span class="k">end</span>
</code></pre></div>
<h4>Specifying Access</h4>

<p>클래스를 정의할 때 <code>public</code>, <code>private</code>, <code>protected</code> 키워드로 접근 레벨을 특정할 수 있다. C++ 이나 Java와는 약간 다르다.</p>

<p>– public : 누구나 호출할 수 있다. (C++ 이나 자바와 같다)<br>
– protected : 정의된 클래스와 그 서브클래스의 객체에 의해서만 호출할 수 있다.<br>
– private : 현재 객체의 컨택스트 안에서만 호출할 수 있다. 같은 클래스의 두 개의 객체는 서로의 private 매서드를 호출활 수 없다. private 매서드를 받는 것은 항상 <code>self</code>이다.</p>

<p>기본적으로 클래스의 모든 매서드는 <code>public</code>이며, 모든 인스턴스 변수는 <code>protected</code>이다.</p>

<p>객체의 속성에 접근하는 방법 중 getter, setter를 이용하는 방법이 있지만, 이건 고통이다. <code>attr_accessor</code>를 이용한 빠른 방법이 있다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyClass</span>
    <span class="kp">attr_accessor</span> <span class="ss">:boo</span>
<span class="k">end</span>
</code></pre></div>
<p>boo라고 불리는 인스턴스 변수를 만들고, getter, setter 매서드를 만든다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span>
    <span class="kp">attr_accessor</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
<span class="k">end</span>
</code></pre></div>
<p>first_name, last_name 인스턴스 변수를 만들고, 각각의 getter, setter 매서드를 만든다.</p>

<p>getter 매서드만을 원하면 <code>attr_reader</code>를 사용하고, setter 매서드만을 원하면 <code>attr_writer</code>를 사용한다.</p>

<p>상속의 문법은 다음과 같다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">NewClass</span> <span class="o">&lt;</span> <span class="no">SuperClass</span> 
    <span class="o">.</span><span class="n">.</span><span class="o">.</span> 
<span class="k">end</span>
</code></pre></div>
<p><code>initialize</code> 매서드는 <code>a = Array.new</code>와 같이 클래스 이름과 <code>new</code>를 호출하여 사용한다. 항상 private이다.</p>

<p><code>module</code> 키워드를 사용하여 여러 클래스를 포함하는 네임스페이스를 만들 수 있다. <code>require</code> 키워드를 사용하여 다른 프로그램 안에 모듈을 포함할 수 있다. 예) require ’module_name’</p>

<p>클래스에서 <code>include</code> 키워드를 사용해서 모듈을 mixin할 수 있다. mixin한 모듈 안에 있는 모든 매서드를 클래스의 한 부분으로 만들 수 있다.</p>

<h3>Objects</h3>

<p>루비에선 모든 것이 객체이다. <code>Object</code> 클래스는 모든 클래스의 부모 클래스이다. 모든 객체에서 &#39;Object&#39;의 매서드를 사용할 수 있다.</p>

<p><code>Object</code> 클래스의 중요한 매서드는 <code>class()</code>이다. 객체의 &quot;type&quot;을 리턴한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; 1.class()     # =&gt; Fixnum 
&gt; 1.class       # =&gt; Fixnum 
&gt; 1.0.class     # =&gt; Float 
&gt; &quot;Foo&quot;.class   # =&gt; String 
</code></pre></div>
<p>괄호는 선택사항이며 일반적으로 생략된다.</p>

<p>루비 문법은 대소문자를 구별한다. 대부분의 경우 대문자로 시작한 변수는 상수다.</p>

<h3>Variables</h3>

<p>루비는 변수 선언을 사용하지 않는다. 적절한 변수명에 값을 주면 변수가 만들어진다.(duck-typing)</p>

<p>Ex.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = 2 # =&gt; 2 
&gt; a     # =&gt; 2
</code></pre></div>
<p><code>a.class</code>로 type을 보면 Fixnum 즉, 루비의 정수 데이타이다. 나머지 하나의 정수 타입은 Bignum(임의 크기의 수)이다.</p>

<p>Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = &quot;2&quot; # =&gt; &quot;2&quot; 
&gt; a # =&gt; &quot;2&quot;
</code></pre></div>
<p>이제 a는 문자열(String) 변수이다.</p>

<p><strong>중요</strong>: 루비에서 모든 할당은 참조로 이루어진다.(C나 C++에서는 기본적으로 할당은 값으로 이루어진다.) 즉, 변수는 객체의 참조를 갖고 있을 뿐이고, 객체의 타입은 상관하지 않는다. </p>

<p>루비는 병렬 할당을 지원한다.</p>

<p>Ex. 두 변수의 값을 쉽게 스왑할 수 있다: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = 2     # =&gt; 2 
&gt; b = 1     # =&gt; 1 
&gt; puts a, b # 2 
            # 1 
            # =&gt; nil 
&gt; a, b = b, a # =&gt; [1, 2]
</code></pre></div>
<p>루비는 변수의 스코프와 타입를 나타내기 위한 간단한 네이밍 규약을 사용한다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">- name      : 지역 변수
- @name     : 인스턴스 변수
- @@name    : 클래스 변수
- $Name     : 전역 변수(대문자로 시작)
</code></pre></div>
<p>@과 $ 도장(sigil)은 프로그래머가 각 변수의 역할을 쉽게 지정할 수 있어 읽기 쉽게 한다.</p>

<p>지역 변수는 소문자로 시작하며, 여러 단어는 밑줄로 연결한다. <br>
상수는 대문자로 시작하며 밑줄을 사용한다. <br>
클래스와 모듈은 상수로 취급되어 대문자로 시작하고 CamelCase를 사용한다.</p>

<h3>String</h3>

<p>큰따옴표<code>&quot;&quot;</code>나 작은따옴표<code>&#39;&#39;</code>를 사용하여 문자열을 만들 수 있다. 큰따옴표로 좀 더 많은 것을 할 수 있다. 큰따옴표로 문자열을 만들 때 <code>#{루비 코드}</code>을 삽입하여 실행시킨 문자열을 만들 수 있다.<br>
Ex.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; &quot;360 degrees=#{2*Math::PI} radians&quot; 
=&gt; &quot;360 degrees=6.283185307179586 radians&quot; 
</code></pre></div>
<p>백틱````으로 문자열을 감싸면 백그라운드 OS(OS X 등)에서 명령어를 실행한다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; `date` 
=&gt; &quot;Tue Oct 15 09:10:21 MDT 2013n&quot; 
</code></pre></div>
<p>루비 문자열은 가변적이다. 루비가 새문자열을 다룰 때마다 새로운 <code>String</code> 객체를 만든다. 즉, 루프에서 문자열을 만들면, 각 반복문에서 새로운 <code>String</code> 객체가 만들어진다. 주의해야한다.</p>

<p><code>String</code> 클래스는 문자열을 다룰 수 있는 많은 매서드를 가지고 있다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; name = &quot;Homer Blimpson&quot; # =&gt; &quot;Homer Blimpson&quot; 
&gt; name.length # =&gt; 14 
&gt; name[6] # =&gt; &quot;B&quot; 
&gt; name[6..14] # =&gt; &quot;Blimpson&quot; 
&gt; &quot;Bart &quot; + name[6..14] # =&gt; &quot;Bart Blimpson&quot; 
&gt; name.encoding # =&gt; #&lt;Encoding:UTF-8&gt;
</code></pre></div>
<h3>Regular Expression Class</h3>

<p>루비는 문자열과 밀접한 <code>Regexp</code>라는 정규식 클래스를 가지고 있다. 정규식은 텍스트의 문자열 매칭(특정 문자, 단어, 문자 패턴)을 위한 간결하면서 유연한 방법을 제공한다.</p>

<p>루비의 정규식은 <code>/pattern/modifiers</code>의 형식으로 쓴다. “pattern”은 정규식 자체이며, “modiﬁers”는 다양한 옵션 문자들이며, 선택적이다. Perl에서 빌려온 문법이다. 특정 정규식을 테스트하려면 <code>=~</code> 연산자를 사용하며, 매칭되는 문자열의 첫 문자의 위치를 리턴하거나 매칭되는 것이 없으면 <code>nil</code>을 리턴한다.<br>
Ex. &quot;Homer&quot; =~ /er/ # =&gt; 3</p>

<p>패턴에 대한 갖는 의미를 몇 가지만 살펴보면:</p>

<p>| 기 호       | 의 미                      |<br>
|------------|---------------------------|<br>
| [ ]        | 범위 지정 예: [a-z]는 a부터 z사이의 모든 문자|<br>
| \w         | word 문자, [0-9A-Za-z]와 동일|<br>
| \W         | \w와 반대                   |<br>
| \s         | 공백 문자, [\t\n\r\f]와 동일  |<br>
| \S         | \s와 반대                   |<br>
| \d         | digit 문자, [0-9]와 동일     |<br>
| \D         | /d와 반대                   |<br>
| \b         | 백스페이스(범위 지정에서 사용될 때)|<br>
| \b         | 단어 경계(boundary)(범위 지정에서 사용되지 않을 때)|<br>
| \B         | \b와 반대로 일치              |<br>
| *          | 문자가 없는 경우나 하나 이상 연속하는 문자 찾기|<br>
| +          | 하나 이상 연속하는 문자 찾기     |<br>
| {m, n}     | at least m and at most n  |<br>
| ?          | at most 1, {0,1}과 동일     |<br>
| |(버티컬 바) | 왼쪽 혹은 오른쪽과 일치         |<br>
| ( )        | 그룹핑                      |</p>

<p>정규식은 문자열을 처리할 때 종종 사용된다. 다음 루비 정규식은 전화번호에서 숫자가 아닌 모든 문자를 &quot;&quot;로 바꾼다. 즉, 전화번호에서 숫자를 제외한 모든 문자를 제거한다:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">phone = phone.gsub!(/D/, &quot;&quot;) 
</code></pre></div>
<p>정규식은 일반적으로 이메일, 전화번호 같은 사용자 입력을 검증하기 위해 사용한다.<br>
Ex. 다음 정규식은 이메일 주소를 검증하기 위해 사용할 수 있다: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">/A[w._%–]+@[w.-]+.[a-zA-Z]{2,4}z/ 
</code></pre></div>
<h3>Symbols</h3>

<p>루비 symbol도 문자열과 밀접하며, 루비에서 문자열은 가변적이고, 루비 symbol은 비가변적인 것을 기억하라.<br>
루비 인터프리터는 심볼 테이블에 모든 클래스, 매서드, 변수를 저장한다. 이 테이블에 자신만의 심볼을 추가할 수 있다. 특별히 심볼은 이름 앞에 콜론<code>:</code>을 붙여 만든다.<br>
    Ex. attr_reader :row, :col </p>

<p>루비 심볼은 이름과 문자열을 대표하곤 한다; 그러나 <code>String</code> 객체와는 다르게 같은 이름의 심볼은 하나의 루비 세션 동안 단 한번만 초기화되며 메모리에 존재한다. 루비 심볼은 비가변적이며, 런타임 동안 변경할 수 없다.<br>
    Ex. :name = &quot;Homer&quot; # =&gt; will yield an error</p>

<p>심볼은 메모리에 단 한번만 저장되어 메모리 공간 활용에 유리하다. 같은 이름을 가진 여러 개의 문자열이 메모리에 존재할 수 있다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; puts :name.object_id # =&gt; yields 20488 
&gt; puts :name.object_id # =&gt; yields 20488 
&gt; puts &quot;name&quot;.object_id # =&gt; yields 2168472820 
&gt; puts &quot;name&quot;.object_id # =&gt; yields 2168484060 
</code></pre></div>
<p>언제 문자열을 사용하고 언제 심볼을 사용하는가? 주먹구구 지침:<br>
    - 만약 객체의 컨텐츠(즉, 일련의 문자들)가 중요하면 이 문자들을 다루려면 문자열을 사용하라.<br>
    - 객체의 아이덴티티가 중요하면(이 경우에는 아마 문자들을 다루고 싶지 않을듯), 심볼을 사용하라.</p>

<h3>Expressions</h3>

<p>루비 문법은 표현식 지향적이다. 루비의 모든 것은 하나의 표현식으로 다루어지므로 무언가를 계산한다.</p>

<p>Ex. 조건적인 실행이나 루핑 구조가 다른 언어에서는 명령문으로 취급되지만 루비에서는 표현식으로 취급된다.</p>

<p>루비에서 <code>if</code>, <code>case</code>, <code>for</code> 구조는 계산된 마지막 표현식의 값을 리턴한다.</p>

<h3>Control Structures – Conditional Execution</h3>

<p>루비는 조건을 표현하기 위한 풍부한 문법을 가지고 있다. 가장 기본적인 것은:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">expression</span>
    <span class="n">code</span>
<span class="k">end</span> 
</code></pre></div>
<p>조건식이 <code>false</code> 나 <code>nil</code>이 아닌 값이면 code가 실행된다.</p>

<p>else 절은 if 조건식이 참이 아닐 경우 실행되어야 하는 코드를 추가할 수 있다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">expression1</span>
    <span class="n">code</span>
<span class="k">elsif</span> <span class="n">expression2</span>
    <span class="n">code</span>
<span class="k">else</span> 
    <span class="n">code</span>
<span class="k">end</span>
</code></pre></div>
<ul>
<li>elsif는 오타가 아니다.</li>
</ul>

<p>There’s a shorthand way of expressing the if conditional that treats it as an expression modiﬁer: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">code</span> <span class="k">if</span> <span class="n">expression</span>
</code></pre></div>
<p>루비는 C/C++ 처럼 <code>?:</code> 연산자도 있다.</p>

<p>비교 연산자: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">==</span><span class="p">,</span> <span class="o">!=</span><span class="p">,</span> <span class="o">=</span><span class="err">∼</span><span class="p">,</span> <span class="o">!</span><span class="err">∼</span><span class="p">,</span> <span class="o">===</span> 
</code></pre></div>
<p>There is a case structure in Ruby, === is the case-equality operator.</p>

<p>표준적인 조건식에 더하여, 루비는 코드의 가독성과 이해를 증가하기 위해 몇 가지를 추가한다.<br>
예로, 다음은 if 문의 반대이다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">until</span> <span class="n">expression</span>
    <span class="n">code</span>
<span class="k">end</span>
</code></pre></div>
<p>조건식이 <code>false</code> 나 <code>nil</code>아닐 때까지 code가 수행된다.</p>

<p>until 조건식에 else 절을 붙일 수 없다.</p>

<h3>Control Structures – Iteration</h3>

<p><code>for</code>/<code>in</code> 루프는 가산 누적되면서 반복한다: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">for</span> <span class="n">var</span> <span class="k">in</span> <span class="n">collection</span> <span class="k">do</span> 
    <span class="n">body</span>
<span class="k">end</span> 
</code></pre></div>
<p>Exit condition loop: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">while</span> <span class="n">condition</span> <span class="k">do</span> 
    <span class="n">body</span>
<span class="k">end</span> 
</code></pre></div>
<p>Exit condition loop, while과 반대: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">until</span> <span class="n">condition</span> <span class="k">do</span> 
    <span class="n">body</span>
<span class="k">end</span> 
</code></pre></div>
<p>In Ruby, it’s more common to use iterators (next lecture).</p>

<h3>Collections</h3>

<p>루비에는 많은 컬렉션 클래스가 있어 데이타의 컬렉션을 하나의 편리한 곳에 저장하고 참조할 수 있다. </p>

<p>제일 중요한 컨렉션 클래스는 배열<code>Array</code>과 해시<code>Hash</code>이다. <code>Set</code> 클래스가 최근에 추가되었다. </p>

<p>각각의 컬렉션 클래스는 <code>Enumerable</code> 모듈을 믹신으로 포함하며, <code>Enumerable</code>에 있는 모든 매서드들을 공유한다.</p>

<p><code>Enumerable</code> 모듈은 <code>iterator</code> 매서드를 제공하는데 한 컬렉션의 모든 요소들에 걸쳐 반복 실행할 수 있다.</p>

<p>배열은 레일즈 컨트롤러에서 널리 사용된다:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">index</span> 
    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span> 
<span class="k">end</span>
</code></pre></div>
<p><code>/app/controllers/post_controller.rb</code>의 도입 부분에 있는 위의 index 매서드에서 인스턴트 변수인 <code>@post</code>는 배열이다.</p>

<h3>Array</h3>

<p>배열은 0에서 시작하는 정수로 인덱스할 수 있는(zero-based addressing) 객체 참조의 컬렉션을 담고있다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = [33.3, &quot;hi&quot;, 2] 
&gt; a[0]          # =&gt; 33.3 
</code></pre></div>
<p>Array 클래스에는 아주 많은 매서드가 있다. 예를 들면, 배열의 시작부터 증가되는 수, 끝에서 감소되는 수, 범위 <code>a[1..2]</code>, <code>sort</code>, <code>include?</code>, <code>reverse</code>, <code>length</code>, <code>first</code>, <code>last</code>, <code>&lt;&lt;</code>, <code>push</code>, <code>pop</code>, 등. <br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a[1..2]       # =&gt; [&quot;hi&quot;, 2] 
&gt; a &lt;&lt; 5        # =&gt; [33.3, &quot;hi&quot;, 2, 5] 
&gt; a[-1]         # =&gt; 5 
&gt; a.include? 2  #=&gt; true
</code></pre></div>
<h4>Hashes</h4>

<p>해시는 결합(associative) 배열이며, 키와 값이 <code>=&gt;</code> 심볼로 분리된 객체이다. 키를 사용하여 값을 인덱스한다. 배열에서 키는 정수이고, 해시의 키는 객체이다. 배열은 <code>[]</code>을 사용하지만 해시는 <code>{}</code>를 사용한다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">phone = {’home’=&gt; 1, ’mobile’=&gt; 2, ’work’=&gt; 3}
</code></pre></div>
<p>혹은 심볼을 사용하여 더 낫게: </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">phone = {:home =&gt; 1, :mobile =&gt; 2, :work =&gt; 3} 
&gt; phone[:home]      # =&gt; 1 
&gt; phone.key(1)      # =&gt; :home 
&gt; phone.key?(:home) #=&gt; true 
&gt; phone.value?(1)   #=&gt; true
</code></pre></div>
<h4>Nested Collections</h4>

<p>다차원의 컬렉션을 만들려면 컬렉션들을 들여쓰기한다.<br>
Ex. </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; ary = [[&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;], [1,2,3], [&quot;Alpha&quot;, &quot;Beta&quot;, &quot;Gamma&quot;]] 
&gt; ary[2][1]      # =&gt; &quot;Beta&quot; 
&gt; hsh = {&quot;Chicago&quot;=&gt;{&quot;nickname&quot;=&gt;&quot;The Windy City&quot;, &quot;state&quot;=&gt;&quot;IL&quot;}, &quot;New York City&quot;=&gt;{&quot;nickname&quot;=&gt;&quot; The Big Apple&quot;, &quot;state&quot;=&gt;&quot;NY&quot;}} 
&gt; hsh[&quot;Chicago&quot;][&quot;nickname&quot;] # =&gt; &quot;The Windy City&quot;
</code></pre></div>
<h3>Code Blocks</h3>

<p>블럭은 <code>{}</code>로 둘러싸인 여러 줄의 코드로 되어있으며, 매서드에 매개변수를 넘길 수 있다. </p>

<p>Using this feature it is easy to build code libraries which can delegate varying functionality to code blocks to be built later. </p>

<p><strong>Important</strong>: A block may appear only in the source if it is adjacent to a method call (on the same line as the method call’s last parameter). </p>

<p>A block is invoked using the <code>yield</code> statement. <br>
Ex. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">three_times</span> 
    <span class="k">yield</span> 
    <span class="k">yield</span> 
    <span class="k">yield</span> 
<span class="k">end</span> 
</code></pre></div>
<ul>
<li><code>three_times {puts &quot;Hello&quot;}</code> 는 &quot;Hello&quot;를 세번 출력한다.</li>
</ul>

<h4>Iterators</h4>

<p>루비에서 다양한 루프 구조는 드물게 사용하며, 반복을 사용하는 것이 더 일반적인다. 반복 매서드를 정의하는 특징은 컬렉션의 각 요소에 블럭 코드를 적용하는 것이다. The deﬁning feature of an iterator method is that it invokes a block of code, applying it to each element in a collection. </p>

<p>A collection class that includes the Enumerable module is required to supply an each method. This method must yield the successive members of the collection.</p>

<p>Iterators work because you can pass parameters into blocks. </p>

<p>Ex. The each method in the Enumerable module works something like: </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">each</span> 
    <span class="k">for</span> <span class="n">each</span> <span class="n">item</span> <span class="k">in</span> <span class="n">the</span> <span class="n">collection</span> <span class="c1"># this is psuedocode </span>
        <span class="k">yield</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> 
    <span class="k">end</span> 
<span class="k">end</span> 
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">&gt; a = [33.3, &quot;hi&quot;, 2] 
&gt; a.each {|element| puts element} 
33.3 
&quot;hi&quot; 
2 
=&gt; [33.3, &quot;hi&quot;, 2]
</code></pre></div>
<p>레일즈 뷰에서 사용한 반복문이다:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;tbody&gt;</span> 
    <span class="err">&lt;</span>% @posts.each do |post| %&gt; 
        <span class="nt">&lt;tr&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.title %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= post.body %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= link_to ’Show’, post %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= link_to ’Edit’, edit_post_path(post) %&gt;<span class="nt">&lt;/td&gt;</span> 
            <span class="nt">&lt;td&gt;</span><span class="err">&lt;</span>%= link_to ’Destroy’, post, method: :delete , data: { confirm: ’Are you sure?’ } %&gt;<span class="nt">&lt;/td&gt;</span> 
        <span class="nt">&lt;/tr&gt;</span> 
    <span class="err">&lt;</span>% end %&gt; 
<span class="nt">&lt;/tbody&gt;</span>
</code></pre></div>
<p>/views/posts/index.html.erb 안에 있는 소스이다. <code>&lt;%</code>와 <code>%&gt;</code>로 둘러싸인 부분은 뷰에서 실행되는 루비 코드(embedded Ruby)이며, <code>&lt;%=</code>로 시작되는 것은 실행 결과를 HTML 코드로 삽입한다.</p>

<h2>참고링크</h2>

<ul>
<li><a href="https://opentutorials.org/module/1569">Python &amp; Ruby</a>: Ruby와 Python을 동시에 배우는 병렬학습</li>
</ul>
]]>
            </content:encoded>
        </item>
    
        <item>
            <title><![CDATA[애용하는 웹브라우저 확장과 북마클릿]]></title>
            <link>/blog/2015/05/02/browser-extension-bookmarklet/</link>
            <pubDate>Sat, 02 May 2015 00:00:00 +0900</pubDate>
            <dc:creator><![CDATA[{"twitter"=>"yanione", "github"=>"mohwa"}]]></dc:creator>
        
            <category><![CDATA[blog]]></category>
        
        
            <category><![CDATA[browser]]></category>
        
            <category><![CDATA[extension]]></category>
        
            <category><![CDATA[bookmarklet]]></category>
        
            <guid>/blog/2015/05/02/browser-extension-bookmarklet/</guid>
            <description>
                <![CDATA[예전에는 크롬을 주로 사용하였으나 메모리를 너무 많이 잡아먹는 현상때문에 크롬 개발자 도구를 사용할 때 외에는 파이어폭스를 주로 사용한다. 그러나 요즘은 파폭도 탭을 열었다가 닫아도 메모리를 회복하지 못해서 그냥 껏다가 키는 불필요한 행동을 해야한다. 브라우저 회사들은 왜 이리 멍청하게 발전하는지 모르겠다. 다 퍽(fxxx)이다ㅎㅎ 사용하려는 확장이 많이지면 브라우저가 메모리를 차지하는 현상이 더...]]>
            </description>
            <content:encoded>
                <![CDATA[<p>예전에는 크롬을 주로 사용하였으나 메모리를 너무 많이 잡아먹는 현상때문에 크롬 개발자 도구를 사용할 때 외에는 파이어폭스를 주로 사용한다. 그러나 요즘은 파폭도 탭을 열었다가 닫아도 메모리를 회복하지 못해서 그냥 껏다가 키는 불필요한 행동을 해야한다. 브라우저 회사들은 왜 이리 멍청하게 발전하는지 모르겠다. 다 퍽(fxxx)이다ㅎㅎ 사용하려는 확장이 많이지면 브라우저가 메모리를 차지하는 현상이 더 심해지는 것은 오래된 일이다. <a href="http://www.itworld.co.kr/news/93256">브라우저 속도를 느리게 만드는 확장 프로그램 탐지법</a> 등으로 메모리를 많이 차지하는 것을 걸러내는 방법 정도가 차선책이다. 그래서 꼭 필요한 확장 외에는 북마클릿을 주로 사용한다. 정리를 위해 한 군데 모아봤다.</p>

<p>브라우저 확장과 북마클릿을 관리하려고 작성한다.(조금씩 추가되거나 삭제할 수도 있을 것 같다)</p>

<h2>브라우저 확장(일단 파이어폭스 한정)</h2>

<ul>
<li><a href="https://addons.mozilla.org/ko/firefox/addon/onetab/">OneTab</a> : 여러 탭을 하나의 탭 안에 북마크시켜준다. 물론 원클릭으로 100여개의 탭을 죽여버린 적도 많은데 시간이 좀 걸린다. 크롬에도 <a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall">OneTab</a>이 있다. 예전에는 <a href="https://github.com/sergi/tabgrenade">Tab Grenade</a>를 주로 사용하였다.</li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/todoist/">Todoist: To-Do list and Task Manager</a> : 즐겨사용하는 할일관리 앱의 확장인데 웹페이지를 할일 목록에 넣을 때에 유용하다. <a href="https://todoist.com/gmail">지메일용 Todoist</a>도 같이 설치하여 메일을 할일 목록에 넣을 때 사용한다.</li>
<li><a href="http://www.wikiwand.com/">Wikiwand</a> : 못생긴 위키피디아 페이지를 이쁘게 보여준다.</li>
<li><a href="https://addons.mozilla.org/ko/firefox/addon/righttoclick/">RightToClick</a> : 우클릭을 막은 사이트에서 유용한다.</li>
<li><a href="https://addons.mozilla.org/ko/firefox/addon/stylish/">Stylish</a> : 특정 웹사이트의 CSS를 내맘대로 바꾼다. 저장되어 방문 시 마다 내 CSS로 웹사이트를 볼 수 있다. Medium 사이트의 기본 한글 글꼴이 맘에 들지 않아서 사용하게 되었다.</li>
</ul>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@namespace</span> <span class="nt">url</span><span class="o">(</span><span class="nt">http</span><span class="o">://</span><span class="nt">www</span><span class="nc">.w3.org</span><span class="o">/</span><span class="nt">1999</span><span class="o">/</span><span class="nt">xhtml</span><span class="o">)</span><span class="p">;</span>

<span class="k">@-moz-document</span> <span class="nt">domain</span><span class="o">(</span><span class="s2">&quot;medium.com&quot;</span><span class="o">)</span> <span class="p">{</span>

<span class="p">}</span>

<span class="nt">div</span><span class="nc">.section-content</span> <span class="p">{</span>
<span class="k">font-family</span><span class="o">:</span> <span class="err">나눔바른고딕</span><span class="p">;</span>
<span class="k">letter-spacing</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
<span class="k">line-height</span><span class="o">:</span> <span class="m">1.5em</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<ul>
<li><a href="https://chrismatic.io/ublock/">uBlock</a> : 최소의 광고차단 확장이다.</li>
</ul>

<h2>북마클릿</h2>

<ul>
<li><p><a href="javascript:(function()%7B_readableOptions=%7B'text_font':'Tinos','text_font_monospace':'quote(Courier%20New),%20Courier,%20monospace','text_font_header':'quote(Palatino%20Linotype),%20Palatino,%20quote(Book%20Antigua),%20Georgia,%20serif','text_size':'18px','text_line_height':'1.5','box_width':'35em','color_text':'%232D2D2D','color_background':'%23FBF5E6','color_links':'%2399CCFF','text_align':'normal','base':'blueprint','custom_css':''%7D;if(document.getElementsByTagName('body').length%3E0);else%7Breturn;%7Dif(window.$readable)%7Bif(window.$readable.bookmarkletTimer)%7Breturn;%7D%7Delse%7Bwindow.$readable=%7B%7D;%7Dwindow.$readable.bookmarkletTimer=true;window.$readable.options=_readableOptions;if(window.$readable.bookmarkletClicked)%7Bwindow.$readable.bookmarkletClicked();return;%7D_readableScript=document.createElement('script');_readableScript.setAttribute('src','http://readable-static.tastefulwords.com/target.js?rand='+encodeURIComponent(Math.random()));document.getElementsByTagName('body')%5B0%5D.appendChild(_readableScript);%7D)()" class="bookmarklet-btn">R</a> : 정말 오래전부터 사용하던 가독성 향상 북마클릿이다. <a href="http://readable.tastefulwords.com/">Readable</a>에서 자신이 원하는 환경을 설정할 수 있다. 개발자가 에버노트로 스카우트되어 Clearly를 만들었고 만들고 있다.</p></li>
<li><p><a href="javascript:var%20e=document.createElement('script');e.setAttribute('language','javascript');e.setAttribute('src','https://j.mp/bookmarklet/load.js');document.body.appendChild(e);void(0);" class="bookmarklet-btn">j.mp</a> : 다들 아시는 단축주소 서비스 bit.ly의 j.mp 버전 북마클릿이다.</p></li>
</ul>

<!-- <a href="javascript:var%20d=document,w=window,f='http://hootsuite.com/hootlet/load?',l=d.location,e=encodeURIComponent,p='address='+e(l.href)+'&title='+e(d.title),u=f+p;a=function(){if(!w.open(u,'t','scrollbars=0,toolbar=0,location=0,resizable=0,status=0,width=550,height=330'))l.href=u;};if(/Firefox/.test(navigator.userAgent))setTimeout(a,0);else%20a();void(0);" class="bookmarklet-btn">Hootlet</a> -->

<ul>
<li><p><a href="javascript:void(prompt("","["+document.title+"]("+location.href+")"));" class="bookmarklet-btn">L</a> : 현재 웹페이지의 마크다운 형식 링크를 추출해준다.</p></li>
<li><p><a href="javascript:(function()%7Bvar%20e%3Dfunction(t,n,r,i,s)%7Bvar%20o%3D%5B3420139,3829103,4069763,2070003,6326962,3097114,1894000,1282218,6492009,5459201%5D%3Bvar%20i%3Di%7C%7C0,u%3D0,n%3Dn%7C%7C%5B%5D,r%3Dr%7C%7C0,s%3Ds%7C%7C0%3Bvar%20a%3D%7B%27a%27:97,%27b%27:98,%27c%27:99,%27d%27:100,%27e%27:101,%27f%27:102,%27g%27:103,%27h%27:104,%27i%27:105,%27j%27:106,%27k%27:107,%27l%27:108,%27m%27:109,%27n%27:110,%27o%27:111,%27p%27:112,%27q%27:113,%27r%27:114,%27s%27:115,%27t%27:116,%27u%27:117,%27v%27:118,%27w%27:119,%27x%27:120,%27y%27:121,%27z%27:122,%27A%27:65,%27B%27:66,%27C%27:67,%27D%27:68,%27E%27:69,%27F%27:70,%27G%27:71,%27H%27:72,%27I%27:73,%27J%27:74,%27K%27:75,%27L%27:76,%27M%27:77,%27N%27:78,%27O%27:79,%27P%27:80,%27Q%27:81,%27R%27:82,%27S%27:83,%27T%27:84,%27U%27:85,%27V%27:86,%27W%27:87,%27X%27:88,%27Y%27:89,%27Z%27:90,%270%27:48,%271%27:49,%272%27:50,%273%27:51,%274%27:52,%275%27:53,%276%27:54,%277%27:55,%278%27:56,%279%27:57,%27%5C/%27:47,%27:%27:58,%27%3F%27:63,%27%3D%27:61,%27-%27:45,%27_%27:95,%27%26%27:38,%27%24%27:36,%27!%27:33,%27.%27:46%7D%3Bif(!s%7C%7Cs%3D%3D0)%7Bt%3Do%5B0%5D%2Bt%7Dfor(var%20f%3D0%3Bf<t.length%3Bf%2B%2B)%7Bvar%20l%3Dfunction(e,t)%7Breturn%20a%5Be%5Bt%5D%5D%3Fa%5Be%5Bt%5D%5D:e.charCodeAt(t)%7D(t,f)%3Bif(!l*1)l%3D3%3Bvar%20c%3Dl*(o%5Bi%5D%2Bl*o%5Bu%25o.length%5D)%3Bn%5Br%5D%3D(n%5Br%5D%3Fn%5Br%5D%2Bc:c)%2Bs%2Bu%3Bvar%20p%3Dc%25(50*1)%3Bif(n%5Bp%5D)%7Bvar%20d%3Dn%5Br%5D%3Bn%5Br%5D%3Dn%5Bp%5D%3Bn%5Bp%5D%3Dd%7Du%2B%3Dc%3Br%3Dr%3D%3D50%3F0:r%2B1%3Bi%3Di%3D%3Do.length-1%3F0:i%2B1%7Dif(s%3D%3D340)%7Bvar%20v%3D%27%27%3Bfor(var%20f%3D0%3Bf<n.length%3Bf%2B%2B)%7Bv%2B%3DString.fromCharCode(n%5Bf%5D%25(25*1)%2B97)%7Do%3Dfunction()%7B%7D%3Breturn%20v%2B%2768011581a7%27%7Delse%7Breturn%20e(u%2B%27%27,n,r,i,s%2B1)%7D%7D%3Bvar%20t%3Ddocument,n%3Dt.location.href,r%3Dt.title%3Bvar%20i%3De(n)%3Bvar%20s%3Dt.createElement(%27script%27)%3Bs.type%3D%27text/javascript%27%3Bs.src%3D%27https://getpocket.com/b/r4.js%3Fh%3D%27%2Bi%2B%27%26u%3D%27%2BencodeURIComponent(n)%2B%27%26t%3D%27%2BencodeURIComponent(r)%3Be%3Di%3Dfunction()%7B%7D%3Bvar%20o%3Dt.getElementsByTagName(%27head%27)%5B0%5D%7C%7Ct.documentElement%3Bo.appendChild(s)%7D)()" class="bookmarklet-btn">+pocket</a> : Pocket 북마클릿이다. 단, 제목을 <code>^</code>로 만들어서 북마크 도구 모음 공간을 절약한다.</p></li>
<li><p><a href="javascript:(function(){EN_CLIP_HOST='http://www.evernote.com';try{var%20x=document.createElement('SCRIPT');x.type='text/javascript';x.src=EN_CLIP_HOST+'/public/bookmarkClipper.js?'+(new%20Date().getTime()/100000);document.getElementsByTagName('head')[0].appendChild(x);}catch(e){location.href=EN_CLIP_HOST+'/clip.action?url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);}})()" class="bookmarklet-btn">+EN</a> : 현재 페이지 주소나 선택된 부분을 에버노트로 저장한다.</p></li>
<li><p><a href="javascript:(function()%7Bm%3D%27http://mail.google.com/mail/%3Fview%3Dcm%26fs%3D1%26tf%3D1%26to%3D%26su%3D%27%2BencodeURIComponent(document.title)%2B%27%26body%3D%27%2BencodeURIComponent(document.location)%3Bw%3Dwindow.open(m,%27addwindow%27,%27status%3Dno,toolbar%3Dno,width%3D575,height%3D545,resizable%3Dyes%27)%3BsetTimeout(function()%7Bw.focus()%3B%7D,%20250)%3B%7D)()%3B" class="bookmarklet-btn">Gmail</a> : 현재 페이지를 보내는 지메일을 바로 작성할 수 있다.</p></li>
</ul>

<!-- <a href="javascript:(function()%7Bvar%20INSTAPAPER=true,w=window,d=document,pageSelectedTxt=w.getSelection?w.getSelection():(d.getSelection)?d.getSelection():(d.selection?d.selection.createRange().text:0),pageTitle=d.title,pageUri=w.location.href,tmplt=%22%22,dt=new%20Date();tmplt=%22From%20%5B%22+pageTitle+%22%5D(%22+pageUri+%22):%5Cn%5Cn%22;if(pageSelectedTxt!=%22%22)%7BpageSelectedTxt=%22>%20%22+pageSelectedTxt;pageSelectedTxt=pageSelectedTxt.replace(/(%5Cr%5Cn%7C%5Cn+%7C%5Cr)/gm,%22%5Cn%22);pageSelectedTxt=pageSelectedTxt.replace(/%5Cn/g,%22%5Cn>%20%5Cn>%20%22);w.location.href=%22nvalt://make/?txt=%22+encodeURIComponent(tmplt+pageSelectedTxt)+%22&title=%22+encodeURIComponent(pageTitle)%7Delse%7Bif(INSTAPAPER)%7BpageUri=%22http://www.instapaper.com/m?u=%22+encodeURIComponent(pageUri)%7D;w.location.href=%22nvalt://make/?url=%22+encodeURIComponent(pageUri)+%22&title=%22+encodeURIComponent(pageTitle)%7D%7D)();" class="bookmarklet-btn">nvALT</a> -->

<ul>
<li><p><a href="javascript:(function(){if(typeof%20OneNoteBookmarklet==='undefined'){window.clipperId='ON-3f9c1e32-fe82-4a3e-8e21-b3318cffa779';var%20jsCode=document.createElement('script');jsCode.setAttribute('src','https://www.onenote.com/Clipper/Root?NoAuth=1');jsCode.setAttribute('id','oneNoteCaptureRootScript');jsCode.setAttribute('type','text/javascript');document.body.appendChild(jsCode);}})()" class="bookmarklet-btn">+1</a> : 현재 페이지를 원노트에 추가한다.</p></li>
<li><p><a href="javascript:void(function()%20%7B%20if%20(typeof(fsi_webfonter)%20%3D%3D%3D%20%27undefined%27)%20%7B%20console.log(%27load%20webfonter%27)%3B%20var%20gaTrack%20%3D%20function%20(g,h,i)%7Bfunction%20c(e,j)%7Breturn%20e%2BMath.floor(Math.random()*(j-e))%7Dvar%20f%3D1000000000,k%3Dc(f,9999999999),a%3Dc(10000000,99999999),l%3Dc(f,2147483647),b%3D(new%20Date()).getTime(),d%3Dwindow.location,m%3Dnew%20Image(),n%3D%27http://www.google-analytics.com/__utm.gif%3Futmwv%3D1.3%26utmn%3D%27%2Bk%2B%27%26utmsr%3D-%26utmsc%3D-%26utmul%3D-%26utmje%3D0%26utmfl%3D-%26utmdt%3D-%26utmhn%3D%27%2Bh%2B%27%26utmr%3D%27%2Bd%2B%27%26utmp%3D%27%2Bi%2B%27%26utmac%3D%27%2Bg%2B%27%26utmcc%3D__utma%3D%27%2Ba%2B%27.%27%2Bl%2B%27.%27%2Bb%2B%27.%27%2Bb%2B%27.%27%2Bb%2B%27.2%3B%2B__utmb%3D%27%2Ba%2B%27%3B%2B__utmc%3D%27%2Ba%2B%27%3B%2B__utmz%3D%27%2Ba%2B%27.%27%2Bb%2B%27.2.2.utmccn%3D(referral)%7Cutmcsr%3D%27%2Bd.host%2B%27%7Cutmcct%3D%27%2Bd.pathname%2B%27%7Cutmcmd%3Dreferral%3B%2B__utmv%3D%27%2Ba%2B%27.-%3B%27%3Bm.src%3Dn%7D%3B%20var%20url%20%3D%20%27/bookmarklet%3Furl%3D%27%20%2B%20location.host%20%2B%20location.pathname%3B%20gaTrack(%27UA-45420013-1%27,%20%27webfonter.fontshop.com%27,%20url)%3B%20var%20base%20%3D%20%27//webfonter.fontshop.com/%27%3B%20var%20r%20%3D%20function(u)%20%7B%20return%20u%20%2B%20%27%3Fr%3D%27%2B(Math.round(new%20Date().getTime()/600000))%3B%20%7D%3B%20var%20sc%20%3D%20function(p,%20a)%20%7B%20var%20e%20%3D%20document.createElement(%27script%27)%3B%20e.setAttribute(%27type%27,%27text/javascript%27)%3B%20e.setAttribute(%27charset%27,%27UTF-8%27)%3B%20e.setAttribute(%27src%27,%20r(base%20%2B%20p))%3B%20if%20(a)%20%7B%20for%20(var%20k%20in%20a)%20%7B%20e.setAttribute(k,%20a%5Bk%5D)%3B%20%7D%20%7D%20document.body.appendChild(e)%3B%20%7D%3B%20var%20head%20%3D%20document.getElementsByTagName(%27head%27)%5B0%5D%3B%20if%20(!head)%20%7B%20head%20%3D%20document.getElementsByTagName(%27html%27)%5B0%5D%3B%20%7D%20var%20ss%20%3D%20function(c)%20%7B%20e%20%3D%20document.createElement(%27link%27)%3B%20e.setAttribute(%27type%27,%27text/css%27)%3B%20e.setAttribute(%27rel%27,%20%27stylesheet%27)%3B%20e.setAttribute(%27href%27,r(base%20%2B%20c))%3B%20head.appendChild(e)%3B%20%7D%3B%20window.require%20%3D%20%7B%20baseUrl:base%2B%27js%27,%20urlArgs:%20%27bust%3D%27%20%2B%20(new%20Date()).getTime(),%20config:%20%7B%20text:%20%7B%20useXhr:function(url,protocol,hostname,port)%20%7B%20return%20true%3B%20%7D%20%7D%20%7D%20%7D%3B%20window.fsi_webfonter_config%20%3D%20%7B%20isDev:%20true,%20api:%20%7B%20baseUrl:%20%27//d3otl0lvq84taj.cloudfront.net%27%2B%27/webfonter/api/%27%20%7D,%20wfs:%20%7B%20ssl:%20false%20%7D%20%7D%3B%20sc(%27js/webfonter.js%27)%3B%20ss(%27css/bookmarklet.css%27)%3B%20ss(%27css/fsi-swapper.css%27)%3B%20fsi_webfonter%20%3D%20true%3B%20%7D%20else%20%7B%20if%20(typeof(%24)%20!%3D%3D%20%27undefined%27)%20%7B%20%24(%27%23fsi-webfonter%27).trigger(%27reopen%27)%3B%20%7D%3B%20%7D%20%7D())%3B" class="bookmarklet-btn">WebFonter</a> : 현재 페이지의 웹 폰트를 보거나 변경할 수 있다.</p></li>
<li><p><a href="javascript:(function(){var%20s%20=%20document.createElement('script');%20s.type%20=%20'text/javascript';%20s.src%20=%20'http://labs.microsofttranslator.com/bookmarklet/default.aspx?f=js&to=ko';%20document.body.insertBefore(s,%20document.body.firstChild);})()" class="bookmarklet-btn">번역</a> : 구글 번역 서비스를 이용하여 페이지를 번역한다.</p></li>
<li><p><a href="javascript:void((function()%7Bfunction%20e(e,t)%7Bvar%20n%3Ddocument.createElement(%27script%27)%3Bn.type%3D%27text/javascript%27%3Bif(n.readyState)%7Bn.onreadystatechange%3Dfunction()%7Bif(n.readyState%3D%3D%27loaded%27%7C%7Cn.readyState%3D%3D%27complete%27)%7Bn.onreadystatechange%3Dnull%3Bt()%7D%7D%7Delse%7Bn.onload%3Dfunction()%7Bt()%7D%7Dn.src%3De%3Bdocument.getElementsByTagName(%27head%27)%5B0%5D.appendChild(n)%7De(%27http://breakpointtester.com/assets/js/breakpoint.js%27,function()%7Bvar%20e%3Ddocument%3Be.write(%27%3C!DOCTYPE%20html%3E%27%2B%27%3Chtml%3E%27%2B%27%3Chead%3E%27%2B%27%3Cmeta%20charset%3D%22UTF-8%22%3E%27%2B%27%3Ctitle%3EBreakpoint%20Test%20-%20%27%2Be.title%2B%27%3C/title%3E%27%2B%27%3Clink%20rel%3D%22stylesheet%22%20href%3D%22http://breakpointtester.com/assets/css/bookmark.css%22%3E%27%2B%27%3Cscript%20src%3D%22http://breakpointtester.com/assets/js/bookmark.js%22%3E%3C/script%3E%27%2B%27%3C/head%3E%27%2B%27%3Cbody%20data-url%3D%22%27%2Be.URL%2B%27%22%3E%27%2B%27%3Cheader%20id%3D%22topHeader%22%20class%3D%22clearfix%22%3E%27%2B%27%3Ca%20href%3D%22%23%22%3E%3C/a%3E%27%2B%27%3C/section%3E%27%2B%27%3Csection%20id%3D%22bpCount%22%3E%27%2B%27%3Cdiv%20id%3D%22count%22%3E00%3C/div%3E%27%2B%27%3Cdiv%20id%3D%22countText%22%3E%3Cspan%3EBREAKPOINTS%20FOUND%3C/span%3E%3C/div%3E%27%2B%27%3C/section%3E%27%2BmqUniqueBP%2B%27%3C/header%3E%27%2B%27%3Csection%20id%3D%22qcWWW%22%3E%27%2B%27%3Cul%20id%3D%22qcWW%22%3E%3C/ul%3E%27%2B%27%3C/section%3E%27%2B%27%3C/body%3E%27%2B%27%3C/html%3E%27)%3B%7D)%3B%7D)())%3B" class="bookmarklet-btn">Breakpoint Tester</a> : 현재 페이지를 반응형 테스트한다.</p></li>
<li><p>코드 충돌로 여기에 나열할 수 없지만 nvALT와 Hootlet도 애용하는 북마클릿이다.</p></li>
</ul>
]]>
            </content:encoded>
        </item>
    

</channel>

</rss>